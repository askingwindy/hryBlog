{"meta":{"version":1,"warehouse":"1.0.1"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":1},{"_id":"themes/next/source/js/nav-toggle.js","path":"js/nav-toggle.js","modified":1},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":1},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":1},{"_id":"themes/next/source/js/lazyload.js","path":"js/lazyload.js","modified":1},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":1},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":1},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":1},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","path":"images/bkdefault_avatar.jpg","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","path":"fonts/icon-linecons/selection.json","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","path":"fonts/icon-fifty-shades/selection.json","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-feather/selection.json","path":"fonts/icon-feather/selection.json","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-default/selection.json","path":"fonts/icon-default/selection.json","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1}],"Cache":[{"_id":"source/_posts/Git方法_Git说明与使用教程.md","shasum":"2c9fe09ea162bb04bcd8e28994926f38186204b3","modified":1444228167941},{"_id":"source/_posts/Git方法_搭建GIT服务器.md","shasum":"54352e854321bdede700f1b346d73a1a76efaf45","modified":1444228162119},{"_id":"source/_posts/JAVA遇到的问题-static关键字.md","shasum":"55c6441368a81aeb6d7c58dd7d13d14258b36b6e","modified":1444228176826},{"_id":"source/_posts/JAVA遇到的问题-集合的深克隆.md","shasum":"44cd05caffba9426560fbbb2d69fa4d024cfbc0d","modified":1444228184191},{"_id":"source/_posts/JDBC学习.md","shasum":"aad7f7fb810de463cecb7bf02b71271302207be2","modified":1444227702046},{"_id":"source/_posts/SQL学习-Part1-SQL列类型.md","shasum":"154ae46a42821a964d9b6da4ac7cb3711d0cf1a9","modified":1444228024038},{"_id":"source/_posts/SQL学习-Part2-SQL基本操作.md","shasum":"dd35aa288bc606256c1bd9b71c755d851ebaa746","modified":1444228038082},{"_id":"source/_posts/SQL学习-Part3-多表连接.md","shasum":"5d189508b8a1b1a4b827d0ca341ff04e388dbb61","modified":1444227974424},{"_id":"source/_posts/SQL学习-Part4-SQL高级语法.md","shasum":"9b68c67032b16443fe380eedecbd0b901b45b75c","modified":1444227935364},{"_id":"source/_posts/odl日志-MAVEN学习-1.md","shasum":"606adda492272c5362043550f8de94a96ba7cda9","modified":1444228084782},{"_id":"source/_posts/odl日志-MAVEN学习-2.md","shasum":"febc5d60e5573b7b86578bb439552ad3cf589cb1","modified":1444228078932},{"_id":"source/_posts/odl日志-MAVEN学习-3.md","shasum":"b83810a41772c94bcb7deea7f640f0dede506659","modified":1444228067329},{"_id":"source/_posts/reading_plan_2014.md","shasum":"4bd845bff0a0d0b8e71e9074b2688dec80a0d30b","modified":1430297908000},{"_id":"source/_posts/reading_plan_2015.md","shasum":"168abd79227b306d3866e9fb0c0248c7d524a0d4","modified":1434033780000},{"_id":"source/_posts/搭建自己的Blog_hexo.md","shasum":"0b124c96ecd625535238bf2092e99ada519641a8","modified":1444228115410},{"_id":"source/about/index.md","shasum":"ffed1a416749d0b78b20684d2813080b548d2f38","modified":1428241154000},{"_id":"source/categories/index.md","shasum":"96ba7ea8b0bb33ce736ca4725b3951d907431672","modified":1428902902000},{"_id":"source/tags/index.md","shasum":"4f03aef008f5dad1db1356e7c6cd95bb83ed53b2","modified":1428902916000},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442490460000},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442490460000},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442490460000},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442490460000},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442490460000},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1442490460000},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1442490460000},{"_id":"themes/next/README.md","shasum":"3319de8565699fc9642f76c41ee96b50f2234b6a","modified":1442490460000},{"_id":"themes/next/_config.yml","shasum":"00d91b8af2f0a83a75ab369e6ec0aafa4fa28cc3","modified":1444227342958},{"_id":"themes/next/bower.json","shasum":"1bdb0641bdcb9b5b154d2e379c57fe5675f06b9c","modified":1442490460000},{"_id":"themes/next/languages/de.yml","shasum":"7a8de0e5665c52a1bf168c1e7dd222c8a74fb0ab","modified":1442490460000},{"_id":"themes/next/languages/default.yml","shasum":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1442490460000},{"_id":"themes/next/languages/en.yml","shasum":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1442490460000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"6d097445342a9fb5235afea35d65bf5271b772f0","modified":1442490460000},{"_id":"themes/next/languages/ru.yml","shasum":"b4a827b9ddac9d5f6dca096fe513aeafb46a3e93","modified":1442490460000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"8af76df5557561050a950bdd7091d3bb3939c5c0","modified":1442490460000},{"_id":"themes/next/languages/zh-hk.yml","shasum":"3fc38103c9efa6f6c37149adbddb014ff85ec849","modified":1442490460000},{"_id":"themes/next/languages/zh-tw.yml","shasum":"8897a06e521b36c7a1226c72057c8357611eded8","modified":1442490460000},{"_id":"themes/next/layout/_layout.swig","shasum":"54f049f8045d386587c1e5d9761c517553b79712","modified":1442490460000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"42927bdde998cefd3cf4f19b0476d69bd9e5116a","modified":1442490460000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"b0c467b42073270db7db41907ce8881f64bf3793","modified":1442490460000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"598b3085b6b74f4664eb66e6ae8737920e07d7a9","modified":1442490460000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"44d513401032362655c40cae66e579dba8dd3d85","modified":1442490460000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"c96f50229b5d26687ec47f628cf3770b2cff8914","modified":1442490460000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"eefb48589ed5b0894ac46883608618ac8a4dba3c","modified":1442490460000},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1442490460000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"d6c7f04eee4388d8f133eb5526b7c0875c321a30","modified":1442490460000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"00c2b49f6289198b0b2b4e157e4ee783277f32a7","modified":1442490460000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"2f92046e0b50ebd65abb7045b1cbbfc50abbb034","modified":1442490460000},{"_id":"themes/next/layout/_partials/search.swig","shasum":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1442490460000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1442490460000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1442490460000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1442490460000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1442490460000},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"0ebbf76c2317faa8ba31365adba59331c2e0262c","modified":1442490460000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1442490460000},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1442490460000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1442490460000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"63b9648dcc03dc2536a7a887185fb15acfabceb4","modified":1442490460000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1442490460000},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1442490460000},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"abc52fefb276c52cbb19de5c214521dfcf2a10fd","modified":1442490460000},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1442490460000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"b63ef233886538f30ced60344ac15d25e5f3e0af","modified":1442490460000},{"_id":"themes/next/layout/archive.swig","shasum":"0c3ce594759f347ea90a4ce592a7a18e2ae4cc5c","modified":1442490460000},{"_id":"themes/next/layout/category.swig","shasum":"d6b3e1dc5e0b8deade9a084c463126e70188ee9b","modified":1442490460000},{"_id":"themes/next/layout/index.swig","shasum":"fdc801f0da71a2eb205ce9c0b12f156b219fdc9c","modified":1442490460000},{"_id":"themes/next/layout/page.swig","shasum":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1442490460000},{"_id":"themes/next/layout/post.swig","shasum":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1442490460000},{"_id":"themes/next/layout/tag.swig","shasum":"aab44af54fcbc66fea4ad12b2767ffca3eadd451","modified":1442490460000},{"_id":"themes/next/scripts/merge-configs.js","shasum":"dfd147d1317e56d283f5e779f00608e913603b51","modified":1442490460000},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"37274f743c2054244dcbbde56fba9ff353414281","modified":1442490460000},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"0d69739d1bad5861a4a6ff2db511c3669783e438","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"54e73681ba6f57ef961138f94d2ee8ac845990c3","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"c307f1e4827d7cb82816a5f9de109ae14ed4199c","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"8f9e8f5f65956ccf1d52ff8526392803dff579d3","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"4b82dbbb6e536e6e8ee3cec6e62c2fd4bea60a09","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1442490460000},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1442490460000},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"e79a08484b191dca14ccfc005053eb95786dafae","modified":1442490460000},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794","modified":1442490460000},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1442490460000},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"cbd7f1d5c72e3024b5d70dafb6ca93e2723652ab","modified":1442490460000},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"f142a185fda68bc579e89ead9a31bc8fa0f3ca8c","modified":1442490460000},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"8b809aef383bebaeb3f282b47675f3a364ce3569","modified":1442490460000},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"80413afacfa656322100ce1900fed1ebcd8f8f44","modified":1442490460000},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"249f75bafa26b99d272352c0646e7497ea680b39","modified":1442490460000},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"ec3f86739bede393cafcd3e31052c01115ae20d6","modified":1442490460000},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"9cdbedb3627ac941cfb063b152abe5a75c3c699a","modified":1442490460000},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1442490460000},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1442490460000},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"73796f6f13caa7151a2ee8e55755627e0d189f55","modified":1442490460000},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1442490460000},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1442490460000},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"ba501332fb111bd72dc0777f2e1c8a29ad538ff9","modified":1442490460000},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"4daaadd156ece64ae05908ad6bb0159c8a27c071","modified":1442490460000},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1442490460000},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"d57e1769ebd2c472d2b27d17a706d3f564f94033","modified":1442490460000},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"f3529b7da284c4b859429573c9b1004d32937e40","modified":1442490460000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"ed1360dfd016c40cce03421742362cabe3e581a0","modified":1442490460000},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1442490460000},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"66985fe77bd323f7f8f634908e17166f51e96e95","modified":1442490460000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"f3f4fac628d0b588cb40795d498110d33b11ce26","modified":1442490460000},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1442490460000},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"c524bccdc554349106d1c8be9c3f275d4c0d4281","modified":1442490460000},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"2588e55132e10d82c0608f03c2c72a2bace8fa4e","modified":1442490460000},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"f5dda1ca48c1b73a0bd34e08413de57699f24083","modified":1442490460000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"66e94d53e65a739c21111440b891d0d98068062b","modified":1442490460000},{"_id":"themes/next/source/css/main.styl","shasum":"b05c342e94ded24a5f2b203cedf77d3faa817fd5","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","shasum":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","shasum":"f92ad8cddc250f0bb5ca466fca95d321987e127e","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","shasum":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-default/selection.json","shasum":"dc07c29f687315f9458f6b251c214768af865fb2","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","shasum":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-feather/selection.json","shasum":"06ea91e3f98ebe1080087acad4356802bc5b6ebf","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","shasum":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","shasum":"72fe82e1f3db52414eed706952d385af241cb196","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","shasum":"fdd09098d1c3688e2c88cf33fd51e76b383b6d7f","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","shasum":"e316347805eb93425faa678611c5e42a7152da8f","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","shasum":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","shasum":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","shasum":"808eaf7d61f7e67c76976265c885e79c36920f0b","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","shasum":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1442490460000},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","shasum":"db4ce25d31449ecc6685b32e145252103967bb5c","modified":1442490460000},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1442490460000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1442490460000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1442490460000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1442490460000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1442490460000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1442490460000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1442490460000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1442490460000},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1442490460000},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1442490460000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1442490460000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1442490460000},{"_id":"themes/next/source/js/fancy-box.js","shasum":"c9782bfa8c1e51a8f8541530d836e75f48a433c2","modified":1442490460000},{"_id":"themes/next/source/js/helpers.js","shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1442490460000},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"ea30e91c6b7fdaa6dce4a848f25cdf90436b072a","modified":1442490460000},{"_id":"themes/next/source/js/lazyload.js","shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1442490460000},{"_id":"themes/next/source/js/motion_fallback.js","shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1442490460000},{"_id":"themes/next/source/js/motion_global.js","shasum":"367e329b2cc19c6b7634ea2917a218c84a22ec17","modified":1442490460000},{"_id":"themes/next/source/js/nav-toggle.js","shasum":"78b59f1beb12adea0d7f9bcf4377cb699963f220","modified":1442490460000},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1442490460000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1442490460000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1442490460000},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1442490460000},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1442490460000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1442490460000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1442490460000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1442490460000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1442490460000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1442490460000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1442490460000},{"_id":"themes/next/test/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1442490460000},{"_id":"themes/next/test/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1442490460000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1442490460000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1442490460000},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1444228367966,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1444228367982,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1444228367992,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1444228368004,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1444228368017,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/jquery/index.js","modified":1444228368044,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1444228368053,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1444228368064,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1444228368075,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1444228368274,"shasum":"b2da44fe9fab1676a02529d82732e69dedee826b"},{"_id":"public/vendors/fastclick/LICENSE","modified":1444228368304,"shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1444228368316,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1444228368326,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1444228368336,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1444228368346,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1444228368353,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1444228368361,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1444228368369,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1444228368397,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1444228368406,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1444228368416,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1444228368427,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1444228368435,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1444228368445,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1444228368456,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1444228368467,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/ua-parser.min.js","modified":1444228368476,"shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a"},{"_id":"public/js/nav-toggle.js","modified":1444228368486,"shasum":"78b59f1beb12adea0d7f9bcf4377cb699963f220"},{"_id":"public/js/motion_global.js","modified":1444228368497,"shasum":"367e329b2cc19c6b7634ea2917a218c84a22ec17"},{"_id":"public/js/motion_fallback.js","modified":1444228368504,"shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e"},{"_id":"public/js/lazyload.js","modified":1444228368511,"shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf"},{"_id":"public/js/hook-duoshuo.js","modified":1444228368518,"shasum":"5f722b3967d50cc1e36efaa5e2a4a0ad464496b0"},{"_id":"public/js/helpers.js","modified":1444228368527,"shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335"},{"_id":"public/js/fancy-box.js","modified":1444228368536,"shasum":"c9782bfa8c1e51a8f8541530d836e75f48a433c2"},{"_id":"public/js/bootstrap.scrollspy.js","modified":1444228368545,"shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"public/images/searchicon.png","modified":1444228368554,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/placeholder.gif","modified":1444228368561,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1444228368574,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/cc-zero.svg","modified":1444228368582,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1444228368593,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1444228368602,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1444228368615,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1444228368625,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1444228368633,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1444228368644,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/images/bkdefault_avatar.jpg","modified":1444228368653,"shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc"},{"_id":"public/fonts/icon-linecons/selection.json","modified":1444228368663,"shasum":"68da6ea1b3ab9355d42694bf5745071cdefa4a65"},{"_id":"public/fonts/icon-linecons/icomoon.woff","modified":1444228368672,"shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8"},{"_id":"public/fonts/icon-linecons/icomoon.ttf","modified":1444228368681,"shasum":"078068206684e4f185b0187ad3cee16f54a287d7"},{"_id":"public/fonts/icon-linecons/icomoon.svg","modified":1444228368689,"shasum":"808eaf7d61f7e67c76976265c885e79c36920f0b"},{"_id":"public/fonts/icon-linecons/icomoon.eot","modified":1444228368701,"shasum":"e2d7f040428a632f3c50bfa94083b759936effc2"},{"_id":"public/fonts/icon-icomoon/icomoon.woff","modified":1444228368718,"shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb"},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","modified":1444228368727,"shasum":"f399713d1c9400d4d3373e38991a7e362a754a94"},{"_id":"public/fonts/icon-icomoon/icomoon.svg","modified":1444228368737,"shasum":"e316347805eb93425faa678611c5e42a7152da8f"},{"_id":"public/fonts/icon-icomoon/icomoon.eot","modified":1444228368746,"shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d"},{"_id":"public/fonts/icon-fifty-shades/selection.json","modified":1444228368755,"shasum":"e5a5042e8e516b1d30fa3b1206d2c74921cec72b"},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","modified":1444228368766,"shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448"},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","modified":1444228368774,"shasum":"72fe82e1f3db52414eed706952d385af241cb196"},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","modified":1444228368782,"shasum":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d"},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","modified":1444228368791,"shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5"},{"_id":"public/fonts/icon-feather/selection.json","modified":1444228368798,"shasum":"d95a90b0d541e48b049902090c0d008ad92b4115"},{"_id":"public/fonts/icon-feather/icomoon.woff","modified":1444228368807,"shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5"},{"_id":"public/fonts/icon-feather/icomoon.ttf","modified":1444228368815,"shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f"},{"_id":"public/fonts/icon-feather/icomoon.svg","modified":1444228368824,"shasum":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41"},{"_id":"public/fonts/icon-feather/icomoon.eot","modified":1444228368831,"shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd"},{"_id":"public/fonts/icon-default/selection.json","modified":1444228368839,"shasum":"ff1b9b78eced4d0368d14cc192ac67a0dd498593"},{"_id":"public/fonts/icon-default/icomoon.woff","modified":1444228368850,"shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8"},{"_id":"public/fonts/icon-default/icomoon.ttf","modified":1444228368858,"shasum":"c093408e6030221cafc1f79d897f1fb5283c1178"},{"_id":"public/fonts/icon-default/icomoon.svg","modified":1444228368866,"shasum":"f92ad8cddc250f0bb5ca466fca95d321987e127e"},{"_id":"public/fonts/icon-default/icomoon.eot","modified":1444228368873,"shasum":"90763e97be18be78e65749075225cceeddc6fa8a"},{"_id":"public/css/main.css","modified":1444228369636,"shasum":"75d4b1fa37c0e6a122869a76ede0aea18c3054df"},{"_id":"public/tags/index.html","modified":1444228369954,"shasum":"de7744be5868c75e742a3eba9558e62b96d1e6d7"},{"_id":"public/categories/index.html","modified":1444228370048,"shasum":"f575d8d01e23eb8a5c468162a94f9aa34c2a9c94"},{"_id":"public/about/index.html","modified":1444228370124,"shasum":"7facb563af28c6e2e3f62c56184f4e65510afb54"},{"_id":"public/2015/05/07/JAVA遇到的问题-static关键字/index.html","modified":1444228370245,"shasum":"6cd8b0dbb001c590501b7831ba555f90abb3979c"},{"_id":"public/2015/04/29/JDBC学习/index.html","modified":1444228370410,"shasum":"45a42372ddd6824fe3815caab3a79b5f5d679fae"},{"_id":"public/2015/04/28/JAVA遇到的问题-集合的深克隆/index.html","modified":1444228370506,"shasum":"d71954576e73b8db69b6f4fae9e3651c954a93f2"},{"_id":"public/2015/04/16/搭建自己的Blog_hexo/index.html","modified":1444228370627,"shasum":"c1aed80881a1674bc89beda31994d3ae7dfdcd39"},{"_id":"public/2015/04/10/SQL学习-Part4-SQL高级语法/index.html","modified":1444228370773,"shasum":"b187c0a891b0aa2f1a60e565d977b1b18b545200"},{"_id":"public/2015/04/09/SQL学习-Part3-多表连接/index.html","modified":1444228370907,"shasum":"b17d345bc8cf07aede99565dd0dec0819c008d0b"},{"_id":"public/2015/04/05/SQL学习-Part2-SQL基本操作/index.html","modified":1444228371048,"shasum":"8580f442fa389bd40c675214e7b4ed5c519dde3b"},{"_id":"public/2015/04/03/SQL学习-Part1-SQL列类型/index.html","modified":1444228371144,"shasum":"94ce090c13f1e8fd291af2ebb046ec2906e65faf"},{"_id":"public/2015/03/01/Git方法_搭建GIT服务器/index.html","modified":1444228371247,"shasum":"218c0cc64ced753f05e93781deb3c5a2be7054ac"},{"_id":"public/2015/01/02/reading_plan_2015/index.html","modified":1444228371341,"shasum":"d888f5f0e23ebe8da2470e3b723be46b811bf1f3"},{"_id":"public/2014/05/16/odl日志-MAVEN学习-3/index.html","modified":1444228371448,"shasum":"a3b0ff58f86e7b22c9494c7edfd40e072d9cd100"},{"_id":"public/2014/05/16/odl日志-MAVEN学习-2/index.html","modified":1444228371536,"shasum":"0c6b413b93c397063dbb929232a0a74054da3f64"},{"_id":"public/2014/05/16/odl日志-MAVEN学习-1/index.html","modified":1444228371635,"shasum":"1048d803aa3a668085d02478e2d0ee0a590865ec"},{"_id":"public/2014/05/05/Git方法_Git说明与使用教程/index.html","modified":1444228371744,"shasum":"095b466887a8ab2c00bb314b314dcdb21266d01a"},{"_id":"public/2014/03/17/reading_plan_2014/index.html","modified":1444228371887,"shasum":"600222fdc69baf8e935a9f56b0a5fc3583685bf3"},{"_id":"public/archives/index.html","modified":1444228372055,"shasum":"779f8352af68879c1c0107dc2c719a2dadac5dba"},{"_id":"public/archives/2014/index.html","modified":1444228372160,"shasum":"662af0c492bc548a889509ceff336f8a73bd71b1"},{"_id":"public/archives/2014/03/index.html","modified":1444228372243,"shasum":"7c0cd3ad841719aa1374c4ea9385784c11d40423"},{"_id":"public/archives/2014/05/index.html","modified":1444228372352,"shasum":"5b35a8d8bbfb1877a7a7946ee0e7e9c3dc29be1d"},{"_id":"public/archives/2015/index.html","modified":1444228372492,"shasum":"9e2f683f5f9233cf670d0f1c86c223ef836003f9"},{"_id":"public/archives/2015/01/index.html","modified":1444228372590,"shasum":"f14a2575913315ac9f674922757a6fc9af4a53d7"},{"_id":"public/archives/2015/03/index.html","modified":1444228372678,"shasum":"dfea79051b6a7a05db8b610d8a2a20daf16b9255"},{"_id":"public/archives/2015/04/index.html","modified":1444228372852,"shasum":"111d80cb877ae717def68f602d8d36b8b27102df"},{"_id":"public/archives/2015/05/index.html","modified":1444228372963,"shasum":"47b57a425630ba2784fa0646dff502255c4d67de"},{"_id":"public/index.html","modified":1444228373177,"shasum":"0794e0a84d93ce326d908e63d648bb43e1be4682"},{"_id":"public/tags/Git/index.html","modified":1444228373250,"shasum":"6f69872178a06261c1b2b3d0e29a8ca8bbbf7229"},{"_id":"public/tags/Blog/index.html","modified":1444228373314,"shasum":"39a2c55410d77ad1e261903f87a77beb5b8bfdcd"},{"_id":"public/tags/程序员初级修炼/index.html","modified":1444228373388,"shasum":"32f71bc557fb02fb04b425aeadb5ca29e6a65963"},{"_id":"public/tags/读书/index.html","modified":1444228373453,"shasum":"e286c2c75a2e57e078b57a6a67802d9116ef0586"},{"_id":"public/tags/Maven/index.html","modified":1444228373521,"shasum":"71af0a4e026163dc20fdb88dc485cc022b8b3e39"},{"_id":"public/tags/SQL基本知识/index.html","modified":1444228373597,"shasum":"7581bb0613019532b6cf53fb1eab51fb8bf9129b"},{"_id":"public/tags/SQL/index.html","modified":1444228373660,"shasum":"41ebb59c5648cd4b01c68a7f738f5563adfd249b"},{"_id":"public/tags/JDBC/index.html","modified":1444228373732,"shasum":"84f08beee56c194dbd1ac5ac24eb66aac5f58c35"},{"_id":"public/tags/Java/index.html","modified":1444228373826,"shasum":"ee0fd32a920ad75fef815adf8890d22afdfff66e"},{"_id":"public/categories/Git使用教程/index.html","modified":1444228373908,"shasum":"31316870993d1a8389f9f65f8c9f1e2a5fbca4c8"},{"_id":"public/categories/Blog/index.html","modified":1444228373983,"shasum":"e99b58807fd355f1148017d104b7cc15e2ebc365"},{"_id":"public/categories/修炼等级计划/index.html","modified":1444228374060,"shasum":"f5f3b4fcd0aa1681e33701a52b1751dbf0d5e1a9"},{"_id":"public/categories/学习Maven/index.html","modified":1444228374128,"shasum":"99ed358bec4643a7689a37971b83e726fbb37adc"},{"_id":"public/categories/SQL/index.html","modified":1444228374193,"shasum":"df7fe99cae9cdcdc7bda972f3d8105c03f59c630"},{"_id":"public/categories/SQL基础知识/index.html","modified":1444228374263,"shasum":"510e88ad7fb830daf965a912f58ee9fe7fe92c92"},{"_id":"public/categories/SQL基本知识/index.html","modified":1444228374324,"shasum":"b592f96d3ea0ec776d78565705ba06131778f3cb"},{"_id":"public/categories/JDBC/index.html","modified":1444228374386,"shasum":"03797b6824680ff3f55de18e420a3c2875eb657f"},{"_id":"public/categories/Java遇到的问题/index.html","modified":1444228374464,"shasum":"0ddb56f8698403d3479752cb49d81c32b8054427"}],"Category":[{"name":"Git使用教程","_id":"cifgwa34s0001ggtugkhe6i30"},{"name":"Blog","_id":"cifgwa3bn0009ggtuuvwbuzto"},{"name":"修炼等级计划","_id":"cifgwa3bw000gggtu9q8gf9o8"},{"name":"学习Maven","_id":"cifgwa3ch000oggtu4hf0j745"},{"name":"SQL","_id":"cifgwa3dh000zggtup3t9pt04"},{"name":"SQL基础知识","_id":"cifgwa3do0014ggtup9yn9wm8"},{"name":"SQL基本知识","_id":"cifgwa3dw001cggtu96bma416"},{"name":"JDBC","_id":"cifgwa3dz001gggtuxqqvl5ig"},{"name":"Java遇到的问题","_id":"cifgwa3e5001lggtul9ys84ob"}],"Data":[],"Page":[{"title":"tags","type":"tags","date":"2014-04-05T13:37:22.000Z","_content":"","source":"tags/index.md","raw":"title: \"tags\"\ntype: \"tags\"\ndate: 2014-04-05 21:37:22\n---","updated":"2015-04-13T05:28:36.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cifgwa3540005ggtuls876p8s"},{"title":"categories","date":"2014-04-05T13:35:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"title: \"categories\"\ndate: 2014-04-05 21:35:13\ntype: \"categories\"\n---","updated":"2015-04-13T05:28:22.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cifgwa3a70006ggtub0rxz7gg"},{"title":"about","date":"2015-04-05T13:39:13.000Z","_content":"","source":"about/index.md","raw":"title: \"about\"\ndate: 2015-04-05 21:39:13\n---\n","updated":"2015-04-05T13:39:14.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cifgwa3bf0007ggtuteimeg7x"}],"Post":[{"title":"Git说明与使用教程","date":"2014-05-05T01:07:15.000Z","description":"如何将本地文件夹初始化为一个Git仓库，并进行版本回退等管理","_content":"\n#初始化git库\n初始化一个Git仓库，使用`git init`命令。\n## 添加文件到Git仓库\n编写文件时，文件在工作区\n###第一步，使用命令git add \n注意，可反复多次使用，添加多个文件；\n此时存在了暂存区，还没提交\n###第二步，使用命令git commit\n完成\n```\n$ git add file1.txt\n$ git add file2.txt\n$ git add file3.txt\n$ git commit -m \"add 3 files.\"\n```\n## 查看历史记录\n###由最近到最远提交的日志信息\n```\ngit log\n```\n###记录本地的每一个命令\n```\ngit reflog\n```\n## 查看本地库状态\n```\ngit status\n```\n## 回退版本\n### 回退到上一版本\n```\ngit reset --hard HEAD^\n```\n### 回退到任一版本\n```\ngit reset --hard commit_id\n```\n### 撤销修改\n#### 场景1\n当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n\n#### 场景2\n当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作\n***\n\n# 添加远程仓库\n现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库可以作为备份。\n##本地Git仓库与Github/gitcafe仓库见通信是SSH加密\n###创建SSH Key。\n在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n```\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n再将密钥添加至自己账户中，详见[github添加密钥](https://help.github.com/articles/generating-ssh-keys)\n###在本地创建版本库\n#### 在托管的github/gitcafe上新建一个仓库后\n在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n##### 1.在本地新建一个文件夹，然后通过命令`git init`将其变为Git可以管理的仓库\n##### 2.使用以下命令将文件添加进版本库\n把文件添加到仓库：\n```\ngit add xxxxx.txt\n```\n用命令git commit告诉Git，把文件提交到仓库：\n```\n$ git commit -m \"添加自己的comments\"\n```\n##### 3.将远程仓库与本地仓库相关联的\n```\n$ git remote add origin git@github.com:xxxxx/xxxxxx.git\n```\n添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。\n##### 4.把本地库的所有内容推送到远程库上：\n```\n$ git push -u origin master\n```\n把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支master推送到远程。\n\n由于远程库是空的，我们第一次推送master分支时，加上了`-u`参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n## git push出错\n### solution:1 强推\n即利用强覆盖方式用你本地的代码替代git仓库内的内容\n```\ngit push -f\n```\n###solution:2 先git pull，再git push\n[先把git的东西fetch到你本地然后merge后再push](http://blog.csdn.net/chain2012/article/details/7476493)\n[branch \"master\"]是需要明确(.git/config)如下的内容\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n这等于告诉git2件事:\n1，当你处于master branch, 默认的remote就是origin。\n2，当你在master branch上使用git pull时，没有指定remote和branch，那么git就会采用默认的remote（也就是origin）来merge在master branch上所有的改变\n如果不想或者不会编辑config文件的话，可以在bush上输入如下命令行\n```\n$ git config branch.master.remote origin  \n$ git config branch.master.merge refs/heads/master  \n```\n之后再重新git pull下。最后git push你的代码吧。\n***\n# 更新本地仓库\n```\ngit pull origin master\n```","source":"_posts/Git方法_Git说明与使用教程.md","raw":"title: Git说明与使用教程\ndate: 2014-05-5 09:07:15\ncategories: Git使用教程\ntags: [Git]\ndescription: 如何将本地文件夹初始化为一个Git仓库，并进行版本回退等管理\n---\n\n#初始化git库\n初始化一个Git仓库，使用`git init`命令。\n## 添加文件到Git仓库\n编写文件时，文件在工作区\n###第一步，使用命令git add \n注意，可反复多次使用，添加多个文件；\n此时存在了暂存区，还没提交\n###第二步，使用命令git commit\n完成\n```\n$ git add file1.txt\n$ git add file2.txt\n$ git add file3.txt\n$ git commit -m \"add 3 files.\"\n```\n## 查看历史记录\n###由最近到最远提交的日志信息\n```\ngit log\n```\n###记录本地的每一个命令\n```\ngit reflog\n```\n## 查看本地库状态\n```\ngit status\n```\n## 回退版本\n### 回退到上一版本\n```\ngit reset --hard HEAD^\n```\n### 回退到任一版本\n```\ngit reset --hard commit_id\n```\n### 撤销修改\n#### 场景1\n当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n\n#### 场景2\n当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作\n***\n\n# 添加远程仓库\n现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库可以作为备份。\n##本地Git仓库与Github/gitcafe仓库见通信是SSH加密\n###创建SSH Key。\n在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n```\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n再将密钥添加至自己账户中，详见[github添加密钥](https://help.github.com/articles/generating-ssh-keys)\n###在本地创建版本库\n#### 在托管的github/gitcafe上新建一个仓库后\n在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n##### 1.在本地新建一个文件夹，然后通过命令`git init`将其变为Git可以管理的仓库\n##### 2.使用以下命令将文件添加进版本库\n把文件添加到仓库：\n```\ngit add xxxxx.txt\n```\n用命令git commit告诉Git，把文件提交到仓库：\n```\n$ git commit -m \"添加自己的comments\"\n```\n##### 3.将远程仓库与本地仓库相关联的\n```\n$ git remote add origin git@github.com:xxxxx/xxxxxx.git\n```\n添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。\n##### 4.把本地库的所有内容推送到远程库上：\n```\n$ git push -u origin master\n```\n把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支master推送到远程。\n\n由于远程库是空的，我们第一次推送master分支时，加上了`-u`参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n## git push出错\n### solution:1 强推\n即利用强覆盖方式用你本地的代码替代git仓库内的内容\n```\ngit push -f\n```\n###solution:2 先git pull，再git push\n[先把git的东西fetch到你本地然后merge后再push](http://blog.csdn.net/chain2012/article/details/7476493)\n[branch \"master\"]是需要明确(.git/config)如下的内容\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n这等于告诉git2件事:\n1，当你处于master branch, 默认的remote就是origin。\n2，当你在master branch上使用git pull时，没有指定remote和branch，那么git就会采用默认的remote（也就是origin）来merge在master branch上所有的改变\n如果不想或者不会编辑config文件的话，可以在bush上输入如下命令行\n```\n$ git config branch.master.remote origin  \n$ git config branch.master.merge refs/heads/master  \n```\n之后再重新git pull下。最后git push你的代码吧。\n***\n# 更新本地仓库\n```\ngit pull origin master\n```","slug":"Git方法_Git说明与使用教程","published":1,"updated":"2015-10-07T14:29:27.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa34i0000ggtuvifohdr0"},{"title":"搭建自己的Blog:hexo","date":"2015-04-16T08:36:30.000Z","description":"主要介绍了Hexo，以及如何利用Hexo在windows和Ubuntu系统下搭建环境,以及将本地blog托管在github/gitcafe上","_content":"# hexo简介\n[Hexo](http://hexo.io/zh-cn/)可以将本地生成的静态网页托管到github或者gitcafe上，作者是台湾的[@tommy351](https://github.com/tommy351/hexo)\n根据网上教程，目前看来常使用的命令只有：`hexo g`, `hexo s`, `hexo d`和`hexo new ...`，十分简单方便\n## hexo管理blog的流程\n### 创建新的文章\n```ruby\nhexo new \"新文章名字\"\n```\n利用[MarkdownPad](http://markdownpad.com/)在本地打开新建的文章，输入内容，并保存。\n### 更新本地blog\n```ruby\nhexo g\n```\n### 本地查看blog\n```ruby\nhexo s\n```\n此时，在浏览器中输入网址[localhost:4000](http://127.0.0.1:4000/)，就可以查看最新的blog。\n###在网上更新自己的blog\n```ruby\nhexo d\n```\n为了使自己的系统能顺利执行以上命令并发表blog，需要做一些准备工作。\n***\n#使用hexo的前期准备\n##win8下搭建hexo环境\n### 安装Git bash\n下载 [git](https://code.google.com/p/msysgit/) 最新版，安装即可\n### 安装Node.js\n下载 [Node.js](http://nodejs.org/) 最新版，安装即可\n### 安装hexo\n在计算机任一位置点击鼠标右键，选择*Git bash*，再在打开的窗口中输入以下命令来安装hexo\n```ruby\nnpm install -g hexo\n```\n安装成功后，再运行以下命令来更新hexo\n```ruby\nnpm update -g hexo\n```\n到此为止已经搭建好hexo环境\n##ubuntu下搭建hexo环境\n### 安装git\n```ruby\n sudo apt-get install git-core\n```\n### 安装Node.js\nnvm的github主页https://github.com/creationix/nvm\n使用以下两个命令中的一个就可以：\n```ruby\ncurl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n或者\n```ruby\nwget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n等待nvm安装完成后重启终端后运行一下命令安装Node.js:\n```ruby\n#通过nvm ls查看nvm版本号。这里是0.10.32\nnvm install 0.10.32\n```\n#### command not found\n重启虚拟机后，使用`hexo`可能会遇见command not found的报错，此时使用`nvm ls`检查Node.js的版本，并使用以下命令运行刚刚安装好的nvm。\n```ruby\nnvm use 0.10.32\n```\n或者直接设置全局的默认Node.js版本\n```ruby\nnvm alias default 0.10.32\n```\n或者在/etc/rc.local文件中加入`nvm use 0.10.32`\n### 安装hexo\n输入以下命令来安装hexo\n```ruby\nnpm install -g hexo\n```\n安装成功后，再运行以下命令来更新hexo\n```ruby\nnpm update -g hexo\n```\n#在本地利用hexo搭建blog\n##初始化本地blog\n选择任意一个文件夹（以后所有的博客信息都在此文件夹中存储），在terminal中输入以下命令来初始化blog（**以后关于此blog的所有操作多需要在这个文件夹开启Git bash，输入命令完成**）。\n```ruby\nhexo init\n```\nhexo会自动在这个文件夹里建立网站所需要的所有文件，此时一个基本的框架已经搭建完毕\n### 本地查看自己博客\n输入以下命令可以在[本地](127.0.0.7:4000)看自己的blog，此时blog只在本地搭建完毕，其他人不能通过浏览器查看这个blog。\n```ruby\nhexo generate\nhexo server\n```\n以后如果更新了blog,可通过以上两个命令在本地查看自己的blog。\n其中`hexo generate`是blog的生成命令，每次更新自己的blog后必须执行此命令才能更新信息。\n***\n#本地Blog发布到网上\n## Github\n国内访问github速度太渣，这里用gitcafe，一个国内的代码托管网站。\n### 注册\n注册[github](https://github.com/),再次假设注册名在此假设`whoami`\n### 进入账户设置\n进入[SSH公钥管理](https://gitcafe.com/account/public_keys),添加主机公钥。产生公钥和配置公钥参考github下的[教程](https://help.github.com/articles/generating-ssh-keys)，几乎一致。再次贴出关键代码。\n#### 产生一个新的SSH\n```ruby\nssh-keygen -t rsa -C \"注册的邮箱“\n```\n一直按回车后，WINDOWS中在`c:\\user\\用户名\\.ssh`（隐藏文件夹）文件夹/LINUX下是~/.ssh的隐藏文件夹中找到新的两个文件:`id_rsa`和`id_rsa.pub`。`id_rsa.pub`利用记事本打开后就是本机公钥。复制到网站的添加公钥中。\n####测试\n可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：\n```ruby\nssh -T git@github.com\n```\n如果是下面的反馈：\n```\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n不要紧张，输入yes就好，然后会看到：\n```\nHi cnfeat! You've successfully authenticated, but GitHub does not provide shell access.\n```\n#####设置用户信息\n现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。\nGit会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。\n```ruby\ngit config --global user.name \"cnfeat\"//用户名\ngit config --global user.email  \"cnfeat@gmail.com\"//填写自己的邮箱\n```\n### 网站上新建项目\n取名一定为`whoami.github.io`，否则**无法托管**成功。\n项目新建成功后，进入项目管理，点击顶部的抓取，获取SSH的url\n### 回到本地blog\n在本地blog的主目录下打开`_config.yml`，拖到文件尾部，参考一下命令配置\n```ruby\ndeploy:\n  type: git #gitcafe托管也是github\n  repository: #刚才复制的url，前面记得空一格，格式类似git@gitcafe.com:whoami/whoami.github.iogit\n  branch: master #git项目的分支\n```\n### 最后部署\n在git bash命令行中输入`hexo deploy`即可秒速布置成功。最后就可以访问主页`whoami.gitcafe.com`\n### 注意\n每次更新blog后，都要先`hexo generate`再`hexo deploy`，否则无法看到最新成果\n## 购买域名\n参考[zipperary的blog：如何绑定二级域名](http://zipperary.com/2013/06/19/secondary-dns/)，先留着，以后自己看\n***\n#hexo的优化\n##添加评论框\n静态博客要使用第三方评论系统，hexo默认集成的是Disqus，国内的话还是建议用多说。直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果你是有的其他第三方评论系统，将通用代码粘贴到`themes\\主题\\layout\\_partial\\comment.ejs`里面，如下：\n```ruby\n<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  #你的通用代码\n<% } %>\n```\n###其他主题添加评论框\n如果使用非官方默认的其他主题，具体参考其README.MD来更改评论框配置，以上仅供参考。\n##更换主题\n在本地blog的主目录下打开`_config.yml`，在`theme: `后添加自己新下载的主题。\n###其他bug（新版的hexo已修正）\n首先 `hexo g` 本地服务器theme是新的，deploy到 Github 样式乱七八糟的\n上传前要 `rm db.json`\n###landscape主题\n#### 最新的landscape中，已经没有comment.ejs，这个评论功能合并到了同目录下的`article.ejs`\n找到`<section id=\"comments\">`，更改上一行的代码为：\n```ruby\n<% if (!index && post.comments){ %> \n```\n之后再里面添加多说代码：\n```ruby\n<section id=\"comments\">\n  <!--多说代码-->\n</section>\n```\n#### 引用的格式修改\n今天发现landscape的引用时居中、斜体，中文不太美观，可以在`themes/landscape/source/css/_partial/article.styl`将引用`blockquote`的格式设置更改为左对齐等，并修改字体颜色，参考如下代码\n```json\nfont-size: 0.9em\nmargin: line-height 0\ntext-align: left\ncolor:#838B8B\n```\n###其他主题\n####TKL主题\n十分漂亮的主题，git：https://github.com/askingwindy/TKL，以及博主的博客：http://go.kieran.top/\n####NEXT主题\n本blog采用的主题，git：https://github.com/askingwindy/hexo-theme-next\n***\n#Hexo中的特殊格式\n## 写文章\n利用hexo自带命令，可以再`sourec/_posts`里按照模板生成一个`.md`的markdown文件，编辑此文件再保存就可以形成一篇漂亮的文档了~\n```ruby\nhexo new \"新文章\"\n```\n生成的新文章中，默认格式如下：\n\n```ruby\ntitle: { { title } }\ndate: { { date } }\ntags: #多标签用格式[tag1,tag2,tag3]\n---\n```\n在hexo中，每个`:`后都必须空一格，否在在`hexo generate`时会报错\n### 自定义模板\n如果想在自己的文章中增加分类，需要在文章首部添加`categories:`，添加后的格式为：\n```ruby\ntitle: { { title } }\ndate: { { date } }\ntags: #空一格写标签\ncategories: #空一格写分类\n---\n```\n为了避免每次添加，可以再`scaffolds/post.md`添加一行`categories:`。`scaffolds`文件夹中其余的`.md`文件机理相同。\n### 插入图片\n使用markdown写文章，插入图片的格式为`![图片名称](链接地址)`。\n对于Hexo，可以支持两种方式的链接地址：\n1. 使用本地路径：在`hexo/sourc`e目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为`/img/图片名称`。\n2. 使用图床，将图片拖入图床中，会生成图片的URL，这就是链接地址。*（网上推荐的有七牛、dropbox）*\n\n### 插入超链接\n与插入图片类似，格式为`[链接名字](链接地址)`\n### 文章摘要\n书写完正文后，页面会显示整篇文章，如果太长，可以再*摘要*(这个摘要自定义...)下添加`<!--more-->`，这样首页显示的只有题目和摘要，查看全文需要点击进去。\n```ruby\n#显示的摘要\n<!--more-->\n#余下正文\n```\n### fancybox\n在文章`.md`的首部添加`photos:`后，可以有意想不到的效果~添加后的格式为：\n```ruby\ntitle: { { title } }\ndate: { { date } }\ntags: #空一格写标签\ncategories: #空一格写分类\nphotos:\n- http:// #图片网址\n- http:// #图片网址\n```\n***\n# 参考资料：\n1. [Zipperary的hexo系列教程](http://zipperary.com/categories/hexo/)\n2. [不如](http://ibruce.info/2013/11/22/hexo-your-blog/ )\n3. [tommy：Hexo 颯爽登場](http://zespia.tw/blog/2012/10/11/hexo-debut/)\n4. [tommy351的github](https://github.com/tommy351/hexo)","source":"_posts/搭建自己的Blog_hexo.md","raw":"title: \"搭建自己的Blog:hexo\"\ndate: 2015-04-16 16:36:30\ntags: [Blog, 程序员初级修炼]\ncategories: Blog\ndescription: 主要介绍了Hexo，以及如何利用Hexo在windows和Ubuntu系统下搭建环境,以及将本地blog托管在github/gitcafe上\n---\n# hexo简介\n[Hexo](http://hexo.io/zh-cn/)可以将本地生成的静态网页托管到github或者gitcafe上，作者是台湾的[@tommy351](https://github.com/tommy351/hexo)\n根据网上教程，目前看来常使用的命令只有：`hexo g`, `hexo s`, `hexo d`和`hexo new ...`，十分简单方便\n## hexo管理blog的流程\n### 创建新的文章\n```ruby\nhexo new \"新文章名字\"\n```\n利用[MarkdownPad](http://markdownpad.com/)在本地打开新建的文章，输入内容，并保存。\n### 更新本地blog\n```ruby\nhexo g\n```\n### 本地查看blog\n```ruby\nhexo s\n```\n此时，在浏览器中输入网址[localhost:4000](http://127.0.0.1:4000/)，就可以查看最新的blog。\n###在网上更新自己的blog\n```ruby\nhexo d\n```\n为了使自己的系统能顺利执行以上命令并发表blog，需要做一些准备工作。\n***\n#使用hexo的前期准备\n##win8下搭建hexo环境\n### 安装Git bash\n下载 [git](https://code.google.com/p/msysgit/) 最新版，安装即可\n### 安装Node.js\n下载 [Node.js](http://nodejs.org/) 最新版，安装即可\n### 安装hexo\n在计算机任一位置点击鼠标右键，选择*Git bash*，再在打开的窗口中输入以下命令来安装hexo\n```ruby\nnpm install -g hexo\n```\n安装成功后，再运行以下命令来更新hexo\n```ruby\nnpm update -g hexo\n```\n到此为止已经搭建好hexo环境\n##ubuntu下搭建hexo环境\n### 安装git\n```ruby\n sudo apt-get install git-core\n```\n### 安装Node.js\nnvm的github主页https://github.com/creationix/nvm\n使用以下两个命令中的一个就可以：\n```ruby\ncurl https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n或者\n```ruby\nwget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n```\n等待nvm安装完成后重启终端后运行一下命令安装Node.js:\n```ruby\n#通过nvm ls查看nvm版本号。这里是0.10.32\nnvm install 0.10.32\n```\n#### command not found\n重启虚拟机后，使用`hexo`可能会遇见command not found的报错，此时使用`nvm ls`检查Node.js的版本，并使用以下命令运行刚刚安装好的nvm。\n```ruby\nnvm use 0.10.32\n```\n或者直接设置全局的默认Node.js版本\n```ruby\nnvm alias default 0.10.32\n```\n或者在/etc/rc.local文件中加入`nvm use 0.10.32`\n### 安装hexo\n输入以下命令来安装hexo\n```ruby\nnpm install -g hexo\n```\n安装成功后，再运行以下命令来更新hexo\n```ruby\nnpm update -g hexo\n```\n#在本地利用hexo搭建blog\n##初始化本地blog\n选择任意一个文件夹（以后所有的博客信息都在此文件夹中存储），在terminal中输入以下命令来初始化blog（**以后关于此blog的所有操作多需要在这个文件夹开启Git bash，输入命令完成**）。\n```ruby\nhexo init\n```\nhexo会自动在这个文件夹里建立网站所需要的所有文件，此时一个基本的框架已经搭建完毕\n### 本地查看自己博客\n输入以下命令可以在[本地](127.0.0.7:4000)看自己的blog，此时blog只在本地搭建完毕，其他人不能通过浏览器查看这个blog。\n```ruby\nhexo generate\nhexo server\n```\n以后如果更新了blog,可通过以上两个命令在本地查看自己的blog。\n其中`hexo generate`是blog的生成命令，每次更新自己的blog后必须执行此命令才能更新信息。\n***\n#本地Blog发布到网上\n## Github\n国内访问github速度太渣，这里用gitcafe，一个国内的代码托管网站。\n### 注册\n注册[github](https://github.com/),再次假设注册名在此假设`whoami`\n### 进入账户设置\n进入[SSH公钥管理](https://gitcafe.com/account/public_keys),添加主机公钥。产生公钥和配置公钥参考github下的[教程](https://help.github.com/articles/generating-ssh-keys)，几乎一致。再次贴出关键代码。\n#### 产生一个新的SSH\n```ruby\nssh-keygen -t rsa -C \"注册的邮箱“\n```\n一直按回车后，WINDOWS中在`c:\\user\\用户名\\.ssh`（隐藏文件夹）文件夹/LINUX下是~/.ssh的隐藏文件夹中找到新的两个文件:`id_rsa`和`id_rsa.pub`。`id_rsa.pub`利用记事本打开后就是本机公钥。复制到网站的添加公钥中。\n####测试\n可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：\n```ruby\nssh -T git@github.com\n```\n如果是下面的反馈：\n```\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n不要紧张，输入yes就好，然后会看到：\n```\nHi cnfeat! You've successfully authenticated, but GitHub does not provide shell access.\n```\n#####设置用户信息\n现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。\nGit会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。\n```ruby\ngit config --global user.name \"cnfeat\"//用户名\ngit config --global user.email  \"cnfeat@gmail.com\"//填写自己的邮箱\n```\n### 网站上新建项目\n取名一定为`whoami.github.io`，否则**无法托管**成功。\n项目新建成功后，进入项目管理，点击顶部的抓取，获取SSH的url\n### 回到本地blog\n在本地blog的主目录下打开`_config.yml`，拖到文件尾部，参考一下命令配置\n```ruby\ndeploy:\n  type: git #gitcafe托管也是github\n  repository: #刚才复制的url，前面记得空一格，格式类似git@gitcafe.com:whoami/whoami.github.iogit\n  branch: master #git项目的分支\n```\n### 最后部署\n在git bash命令行中输入`hexo deploy`即可秒速布置成功。最后就可以访问主页`whoami.gitcafe.com`\n### 注意\n每次更新blog后，都要先`hexo generate`再`hexo deploy`，否则无法看到最新成果\n## 购买域名\n参考[zipperary的blog：如何绑定二级域名](http://zipperary.com/2013/06/19/secondary-dns/)，先留着，以后自己看\n***\n#hexo的优化\n##添加评论框\n静态博客要使用第三方评论系统，hexo默认集成的是Disqus，国内的话还是建议用多说。直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果你是有的其他第三方评论系统，将通用代码粘贴到`themes\\主题\\layout\\_partial\\comment.ejs`里面，如下：\n```ruby\n<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  #你的通用代码\n<% } %>\n```\n###其他主题添加评论框\n如果使用非官方默认的其他主题，具体参考其README.MD来更改评论框配置，以上仅供参考。\n##更换主题\n在本地blog的主目录下打开`_config.yml`，在`theme: `后添加自己新下载的主题。\n###其他bug（新版的hexo已修正）\n首先 `hexo g` 本地服务器theme是新的，deploy到 Github 样式乱七八糟的\n上传前要 `rm db.json`\n###landscape主题\n#### 最新的landscape中，已经没有comment.ejs，这个评论功能合并到了同目录下的`article.ejs`\n找到`<section id=\"comments\">`，更改上一行的代码为：\n```ruby\n<% if (!index && post.comments){ %> \n```\n之后再里面添加多说代码：\n```ruby\n<section id=\"comments\">\n  <!--多说代码-->\n</section>\n```\n#### 引用的格式修改\n今天发现landscape的引用时居中、斜体，中文不太美观，可以在`themes/landscape/source/css/_partial/article.styl`将引用`blockquote`的格式设置更改为左对齐等，并修改字体颜色，参考如下代码\n```json\nfont-size: 0.9em\nmargin: line-height 0\ntext-align: left\ncolor:#838B8B\n```\n###其他主题\n####TKL主题\n十分漂亮的主题，git：https://github.com/askingwindy/TKL，以及博主的博客：http://go.kieran.top/\n####NEXT主题\n本blog采用的主题，git：https://github.com/askingwindy/hexo-theme-next\n***\n#Hexo中的特殊格式\n## 写文章\n利用hexo自带命令，可以再`sourec/_posts`里按照模板生成一个`.md`的markdown文件，编辑此文件再保存就可以形成一篇漂亮的文档了~\n```ruby\nhexo new \"新文章\"\n```\n生成的新文章中，默认格式如下：\n\n```ruby\ntitle: { { title } }\ndate: { { date } }\ntags: #多标签用格式[tag1,tag2,tag3]\n---\n```\n在hexo中，每个`:`后都必须空一格，否在在`hexo generate`时会报错\n### 自定义模板\n如果想在自己的文章中增加分类，需要在文章首部添加`categories:`，添加后的格式为：\n```ruby\ntitle: { { title } }\ndate: { { date } }\ntags: #空一格写标签\ncategories: #空一格写分类\n---\n```\n为了避免每次添加，可以再`scaffolds/post.md`添加一行`categories:`。`scaffolds`文件夹中其余的`.md`文件机理相同。\n### 插入图片\n使用markdown写文章，插入图片的格式为`![图片名称](链接地址)`。\n对于Hexo，可以支持两种方式的链接地址：\n1. 使用本地路径：在`hexo/sourc`e目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为`/img/图片名称`。\n2. 使用图床，将图片拖入图床中，会生成图片的URL，这就是链接地址。*（网上推荐的有七牛、dropbox）*\n\n### 插入超链接\n与插入图片类似，格式为`[链接名字](链接地址)`\n### 文章摘要\n书写完正文后，页面会显示整篇文章，如果太长，可以再*摘要*(这个摘要自定义...)下添加`<!--more-->`，这样首页显示的只有题目和摘要，查看全文需要点击进去。\n```ruby\n#显示的摘要\n<!--more-->\n#余下正文\n```\n### fancybox\n在文章`.md`的首部添加`photos:`后，可以有意想不到的效果~添加后的格式为：\n```ruby\ntitle: { { title } }\ndate: { { date } }\ntags: #空一格写标签\ncategories: #空一格写分类\nphotos:\n- http:// #图片网址\n- http:// #图片网址\n```\n***\n# 参考资料：\n1. [Zipperary的hexo系列教程](http://zipperary.com/categories/hexo/)\n2. [不如](http://ibruce.info/2013/11/22/hexo-your-blog/ )\n3. [tommy：Hexo 颯爽登場](http://zespia.tw/blog/2012/10/11/hexo-debut/)\n4. [tommy351的github](https://github.com/tommy351/hexo)","slug":"搭建自己的Blog_hexo","published":1,"updated":"2015-10-07T14:28:35.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3bk0008ggtufb89oxzh"},{"title":"2015读书计划","date":"2015-01-02T03:27:48.000Z","description":"2015年读书计划","_content":"#1月\n##技术类书籍\n1.  JAVA编程思想（第4版）—[美]Bruce Eckel \n2.  数据结构与算法（Java语言版）— [美]德罗兹德克 \n2.  设计模式与禅 — 秦小波 \n\n##文学\n1. 文学回忆录（上、下）— 木心\n\n##小说\n1. 解忧杂货店 — [日]东野圭吾\n\n##2月\n##技术类书籍\n1. 剑指OFFER — 何海涛 \n2.  JAVA程序员面试笔试宝典 —  何昊 / 薛鹏 / 叶向阳 （不推荐再看）\n3.  深入理解Java虚拟机（第2版）— 周志明\n4. Java网络编程(中文版 第3版) — [美]Elliotte Rusty Harold \n\n##小说\n1. 海伯利安四部曲 — [美]丹·西蒙斯 \n\t2. 海伯利安\n\t3. 海伯利安的陨落\n\t4. 安迪密恩\n\t5. 安迪密恩的觉醒\n\n##其他\n1. 只愿你曾被这世界温柔相待—水木丁\n\n##3月\n##技术类书籍\n1. 剑指OFFER — 何海涛 \n3.  深入理解Java虚拟机（第2版）— 周志明\n4.  疯狂JAVA讲义 — 李阳\n\n##文学\n1. 战争与和平 — [俄]列夫·托尔斯泰\n\n##小说\n1. 人类灭绝 —[日] 高野和明 \n\n##4月\n##技术类书籍\n1. 疯狂java程序员的基本修养 — 李阳\n2.  图解HTTP — [日]上野宣 \n3.  Java并发编程实战 — [美]Brian Goetz / Tim Peierls / Joshua Bloch / Joseph Bowbeer / David Holmes / Doug Lea\n\n##文学\n1. 草枕 — [日]夏目漱石\n2. 当我们在谈论爱情时我们在谈论什么—[美]雷蒙德·卡佛\n\n##其他\n1. 学会提问—尼尔·布朗\n2. 跟任何人都聊得来—迈克·贝克特尔\n\n#5月\n##其他\n1. 心理学与生活 — [美] 理查德·格里格 / 菲利普·津巴多 \n\n#6月\n##技术类书籍\n1. Spring权威指南 — 计文柯\n\n##其他\n1. 沟通的艺术看入人里，看出人外）—[美]罗伊德·B·阿德勒\n\n##纯英文\n2. Gone Girl","source":"_posts/reading_plan_2015.md","raw":"title: 2015读书计划\ndate: 2015-01-02 11:27:48\ncategories: 修炼等级计划\ntags: 读书\ndescription: 2015年读书计划\n---\n#1月\n##技术类书籍\n1.  JAVA编程思想（第4版）—[美]Bruce Eckel \n2.  数据结构与算法（Java语言版）— [美]德罗兹德克 \n2.  设计模式与禅 — 秦小波 \n\n##文学\n1. 文学回忆录（上、下）— 木心\n\n##小说\n1. 解忧杂货店 — [日]东野圭吾\n\n##2月\n##技术类书籍\n1. 剑指OFFER — 何海涛 \n2.  JAVA程序员面试笔试宝典 —  何昊 / 薛鹏 / 叶向阳 （不推荐再看）\n3.  深入理解Java虚拟机（第2版）— 周志明\n4. Java网络编程(中文版 第3版) — [美]Elliotte Rusty Harold \n\n##小说\n1. 海伯利安四部曲 — [美]丹·西蒙斯 \n\t2. 海伯利安\n\t3. 海伯利安的陨落\n\t4. 安迪密恩\n\t5. 安迪密恩的觉醒\n\n##其他\n1. 只愿你曾被这世界温柔相待—水木丁\n\n##3月\n##技术类书籍\n1. 剑指OFFER — 何海涛 \n3.  深入理解Java虚拟机（第2版）— 周志明\n4.  疯狂JAVA讲义 — 李阳\n\n##文学\n1. 战争与和平 — [俄]列夫·托尔斯泰\n\n##小说\n1. 人类灭绝 —[日] 高野和明 \n\n##4月\n##技术类书籍\n1. 疯狂java程序员的基本修养 — 李阳\n2.  图解HTTP — [日]上野宣 \n3.  Java并发编程实战 — [美]Brian Goetz / Tim Peierls / Joshua Bloch / Joseph Bowbeer / David Holmes / Doug Lea\n\n##文学\n1. 草枕 — [日]夏目漱石\n2. 当我们在谈论爱情时我们在谈论什么—[美]雷蒙德·卡佛\n\n##其他\n1. 学会提问—尼尔·布朗\n2. 跟任何人都聊得来—迈克·贝克特尔\n\n#5月\n##其他\n1. 心理学与生活 — [美] 理查德·格里格 / 菲利普·津巴多 \n\n#6月\n##技术类书籍\n1. Spring权威指南 — 计文柯\n\n##其他\n1. 沟通的艺术看入人里，看出人外）—[美]罗伊德·B·阿德勒\n\n##纯英文\n2. Gone Girl","slug":"reading_plan_2015","published":1,"updated":"2015-06-11T14:43:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3bu000fggtuw5fqfqxr"},{"title":"2014读书计划","date":"2014-03-17T03:27:48.000Z","photos":["http://askingwindy-gitcafe.qiniudn.com/%E8%8E%AB%E7%BD%97%E5%8D%9A%E5%A3%AB%E5%B2%9B.png","http://askingwindy-gitcafe.qiniudn.com/%E7%81%AB%E6%98%9F%E5%85%AC%E4%B8%BB.png","http://askingwindy-gitcafe.qiniudn.com/QQ%E6%88%AA%E5%9B%BE20140614155527.png","http://askingwindy-gitcafe.qiniudn.com/%E7%81%AB%E6%98%9F%E7%BC%96%E5%B9%B4%E5%8F%B2.png","http://askingwindy-gitcafe.qiniudn.com/HEAD_FIRST_JAVA.png","http://askingwindy-gitcafe.qiniudn.com/MAVEN%E5%AE%9E%E6%88%98.png","http://askingwindy-gitcafe.qiniudn.com/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B71.png","http://askingwindy-gitcafe.qiniudn.com/%E5%B8%A6%E5%B0%8F%E7%8B%97%E7%9A%84%E5%A5%B3%E4%BA%BA.png","http://askingwindy-gitcafe.qiniudn.com/%E9%99%86%E7%8A%AF%E7%84%89%E8%AF%86.png","http://askingwindy-gitcafe.qiniudn.com/%E7%9B%8A%E5%BE%80%E7%9B%B4%E5%89%8D.png","http://askingwindy-gitcafe.qiniudn.com/%E4%B8%80%E4%BB%B6%E8%87%AA%E5%B7%B1%E7%9A%84%E6%88%BF%E9%97%B4.png","http://askingwindy-gitcafe.qiniudn.com/%E4%BC%BC%E6%B0%B4%E6%9F%94%E6%83%85.png","http://askingwindy-gitcafe.qiniudn.com/%E5%85%A8%E7%90%83%E4%B9%A6%E8%AF%84%C2%B7%E7%AB%A5%E8%AF%9D%E7%9A%84%E8%AF%B1%E6%83%91.png","http://askingwindy-gitcafe.qiniudn.com/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85.png"],"description":"2014年读书计划","_content":"\n# 3月\n##人文\n1. H.G.Wells-莫罗博士岛(2014.3.18)\n2. Edgar Rice Burroughs - 火星公主(2014.3.22）\n\n# 4月\n##人文艺术\n1. 我是落花生的女儿（2014/4/25 9:22:46 ）\n2. 报任安书（2014/4/5） \n3. 史记：商鞅列传（2014/4/10）\n4. 火星编年史（2014/4/15）\n\n# 5月\n## 技术类书籍\n2. HEAD FIRST JAVA(中文)（2014/5/5 11:36:12）\n1. Maven实战（2014/5/14 19:48:10） \n2. JAVA核心编程技术 卷1（2014/5/16 19:48:22） \n\n## 人文艺术\n2. 带小狗的女人-契科夫（2014/5/27 17:29:10） \n\n# 6月\n## 技术类书籍\n1.  JAVA核心编程技术 卷1(2014/6/22 16:36:38 )\n\n## 人文艺术\n1. 陆犯焉识-严歌苓（2014/6/3 13:01:14） \n2. 益往直前-水均益（2014/6/8 18:02:02 ）\n3. 一件自己的房间-伍尔夫（2014/6/14 15:40:29 ）\n4. 查密莉雅-[吉尔吉斯斯坦] 艾特玛托夫（2014/6/22 16:36:02 ）\n\n# 7月\n## 人文艺术\n1. 太阳照常升起-海明威(2014/7/5 17:06:08 )\n2. 告白与告别-韩寒(2014/7/27 13:56:38 )\n\n# 8月\n## 技术类书籍\n1. 浪潮之巅-吴军(2014/8/4 10:13:08 )\n2. 数据结构与算法分析:Java语言描述(第2版)-韦斯 (Mark Allen Weiss(2014/8/21 18:20:43 )：没看懂\n\n## 人文艺术\n1. 早期作品 唐人故事 似水柔情-王小波（2014/8/1 15:01:22 ）\n\n## 其他\n1. 全球书评·童话的诱惑（2014/8/2 19:02:29 ）\n2. 全球书评·伍尔夫的思想撤退 (2014/8/11 16:27:20 )\n2. 全球书评·第十期（2014/8/13 10:22:03 ）\n3. 全球书评·一位女士的肖像(2014/8/14 16:34:23 )\n4. 全球书评·小人书，大世界（2014/8/15 9:20:03 ）","source":"_posts/reading_plan_2014.md","raw":"title: 2014读书计划\ndate: 2014-03-17 11:27:48\ncategories: 修炼等级计划\ntags: 读书\nphotos:\n- http://askingwindy-gitcafe.qiniudn.com/%E8%8E%AB%E7%BD%97%E5%8D%9A%E5%A3%AB%E5%B2%9B.png\n- http://askingwindy-gitcafe.qiniudn.com/%E7%81%AB%E6%98%9F%E5%85%AC%E4%B8%BB.png\n- http://askingwindy-gitcafe.qiniudn.com/QQ%E6%88%AA%E5%9B%BE20140614155527.png\n- http://askingwindy-gitcafe.qiniudn.com/%E7%81%AB%E6%98%9F%E7%BC%96%E5%B9%B4%E5%8F%B2.png\n- http://askingwindy-gitcafe.qiniudn.com/HEAD_FIRST_JAVA.png\n- http://askingwindy-gitcafe.qiniudn.com/MAVEN%E5%AE%9E%E6%88%98.png\n- http://askingwindy-gitcafe.qiniudn.com/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B71.png\n- http://askingwindy-gitcafe.qiniudn.com/%E5%B8%A6%E5%B0%8F%E7%8B%97%E7%9A%84%E5%A5%B3%E4%BA%BA.png\n- http://askingwindy-gitcafe.qiniudn.com/%E9%99%86%E7%8A%AF%E7%84%89%E8%AF%86.png\n- http://askingwindy-gitcafe.qiniudn.com/%E7%9B%8A%E5%BE%80%E7%9B%B4%E5%89%8D.png\n- http://askingwindy-gitcafe.qiniudn.com/%E4%B8%80%E4%BB%B6%E8%87%AA%E5%B7%B1%E7%9A%84%E6%88%BF%E9%97%B4.png\n- http://askingwindy-gitcafe.qiniudn.com/%E4%BC%BC%E6%B0%B4%E6%9F%94%E6%83%85.png\n- http://askingwindy-gitcafe.qiniudn.com/%E5%85%A8%E7%90%83%E4%B9%A6%E8%AF%84%C2%B7%E7%AB%A5%E8%AF%9D%E7%9A%84%E8%AF%B1%E6%83%91.png\n- http://askingwindy-gitcafe.qiniudn.com/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85.png\ndescription: 2014年读书计划\n---\n\n# 3月\n##人文\n1. H.G.Wells-莫罗博士岛(2014.3.18)\n2. Edgar Rice Burroughs - 火星公主(2014.3.22）\n\n# 4月\n##人文艺术\n1. 我是落花生的女儿（2014/4/25 9:22:46 ）\n2. 报任安书（2014/4/5） \n3. 史记：商鞅列传（2014/4/10）\n4. 火星编年史（2014/4/15）\n\n# 5月\n## 技术类书籍\n2. HEAD FIRST JAVA(中文)（2014/5/5 11:36:12）\n1. Maven实战（2014/5/14 19:48:10） \n2. JAVA核心编程技术 卷1（2014/5/16 19:48:22） \n\n## 人文艺术\n2. 带小狗的女人-契科夫（2014/5/27 17:29:10） \n\n# 6月\n## 技术类书籍\n1.  JAVA核心编程技术 卷1(2014/6/22 16:36:38 )\n\n## 人文艺术\n1. 陆犯焉识-严歌苓（2014/6/3 13:01:14） \n2. 益往直前-水均益（2014/6/8 18:02:02 ）\n3. 一件自己的房间-伍尔夫（2014/6/14 15:40:29 ）\n4. 查密莉雅-[吉尔吉斯斯坦] 艾特玛托夫（2014/6/22 16:36:02 ）\n\n# 7月\n## 人文艺术\n1. 太阳照常升起-海明威(2014/7/5 17:06:08 )\n2. 告白与告别-韩寒(2014/7/27 13:56:38 )\n\n# 8月\n## 技术类书籍\n1. 浪潮之巅-吴军(2014/8/4 10:13:08 )\n2. 数据结构与算法分析:Java语言描述(第2版)-韦斯 (Mark Allen Weiss(2014/8/21 18:20:43 )：没看懂\n\n## 人文艺术\n1. 早期作品 唐人故事 似水柔情-王小波（2014/8/1 15:01:22 ）\n\n## 其他\n1. 全球书评·童话的诱惑（2014/8/2 19:02:29 ）\n2. 全球书评·伍尔夫的思想撤退 (2014/8/11 16:27:20 )\n2. 全球书评·第十期（2014/8/13 10:22:03 ）\n3. 全球书评·一位女士的肖像(2014/8/14 16:34:23 )\n4. 全球书评·小人书，大世界（2014/8/15 9:20:03 ）","slug":"reading_plan_2014","published":1,"updated":"2015-04-29T08:58:28.000Z","comments":1,"layout":"post","link":"","_id":"cifgwa3c4000kggtute4uvf4f"},{"title":"MAVEN学习-3","date":"2014-05-16T08:54:04.000Z","_content":"# ODL中Maven管理\n1. 关闭MAVEN的测试功能\n\n```\nmvn clean install -DskipTests \n/* instead of \"mvn clean install\" */\n```\n\n2. 关闭MAVEN在线更新依赖库与插件\n\n```\n-o，--offline 离线模式工作\n```\n\n该参数可以阻止通过网络更新插件或依赖。\n\n3. eclipse下关闭MAVEN的更新\n![eclipse下关闭更新](http://askingwindy-gitcafe.qiniudn.com/5-16.png)\n\n<!--more-->\n\n---\n\n# OSGI+MAVEN\n\n#### how can maven-bundle-plugin find packages in Import-Package - Stack Overflow?\n a package is referenced in bytecode, the bundle plugin already knows its name and can include it in the import package statement, so it doesn't need to be \"found\". However, almost always anything referenced in the bytecode will be included as a maven dependency\n[more](http://stackoverflow.com/questions/12445933/how-can-maven-bundle-plugin-find-packages-in-import-package)\n\n## ODL里OSGI模块pom.xml文件修改\n\n参考blog:[http://fredhsu.wordpress.com/2013/05/14/odl-maven-osgi/](http://app.yinxiang.com/shard/s8/sh/98dd2fa4-254a-4f21-895a-9b7cac40d03d/c47f8d0741c1395cfb59c4e3a01aa696)\n\n参考代码：[odl-apps](https://github.com/askingwindy/odl-apps/blob/master/mystats/pom.xml)\n\n\n1. line4-9：继承ODL项目中的父pom\n2. line15：将packaging从jar改为bundle\n3. line18-48：为OSGI声明flexi plugin\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.opendaylight.controller</groupId>\n        <artifactId>commons.opendaylight</artifactId>\n        <version>1.4.0-SNAPSHOT</version>\n        <relativePath>../../../controller/opendaylight/commons/opendaylight</relativePath>\n    </parent>\n\n    <groupId>com.example</groupId>\n    <artifactId>mystats</artifactId>\n    <name>mystats</name>\n    <url>http://maven.apache.org</url>\n    <packaging>bundle</packaging>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.felix</groupId>\n                <artifactId>maven-bundle-plugin</artifactId>\n                <version>2.3.6</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <instructions>\n                        <Import-Package>\n                            org.opendaylight.controller.sal.core,\n                            org.opendaylight.controller.statisticsmanager,\n                            org.opendaylight.controller.switchmanager,\n                            org.opendaylight.controller.sal.utils,\n                            org.opendaylight.controller.sal.reader,\n                            org.opendaylight.controller.sal.flowprogrammer,\n                            org.opendaylight.controller.sal.match,\n                            org.slf4j,\n                            org.apache.felix.dm\n                        </Import-Package>\n                        <Bundle-Activator>\n                            com.example.mystats.Activator\n                        </Bundle-Activator>\n                        <Export-Package>\n                            com.example.mystats\n                        </Export-Package>\n                    </instructions>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>3.8.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.opendaylight.controller</groupId>\n            <artifactId>sal</artifactId>\n            <version>0.4.0-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>org.opendaylight.controller</groupId>\n            <artifactId>statisticsmanager</artifactId>\n            <version>0.4.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n\n","source":"_posts/odl日志-MAVEN学习-3.md","raw":"title: MAVEN学习-3\ndate: 2014-05-16 16:54:04\ncategories: 学习Maven\ntags: [Maven]\n---\n# ODL中Maven管理\n1. 关闭MAVEN的测试功能\n\n```\nmvn clean install -DskipTests \n/* instead of \"mvn clean install\" */\n```\n\n2. 关闭MAVEN在线更新依赖库与插件\n\n```\n-o，--offline 离线模式工作\n```\n\n该参数可以阻止通过网络更新插件或依赖。\n\n3. eclipse下关闭MAVEN的更新\n![eclipse下关闭更新](http://askingwindy-gitcafe.qiniudn.com/5-16.png)\n\n<!--more-->\n\n---\n\n# OSGI+MAVEN\n\n#### how can maven-bundle-plugin find packages in Import-Package - Stack Overflow?\n a package is referenced in bytecode, the bundle plugin already knows its name and can include it in the import package statement, so it doesn't need to be \"found\". However, almost always anything referenced in the bytecode will be included as a maven dependency\n[more](http://stackoverflow.com/questions/12445933/how-can-maven-bundle-plugin-find-packages-in-import-package)\n\n## ODL里OSGI模块pom.xml文件修改\n\n参考blog:[http://fredhsu.wordpress.com/2013/05/14/odl-maven-osgi/](http://app.yinxiang.com/shard/s8/sh/98dd2fa4-254a-4f21-895a-9b7cac40d03d/c47f8d0741c1395cfb59c4e3a01aa696)\n\n参考代码：[odl-apps](https://github.com/askingwindy/odl-apps/blob/master/mystats/pom.xml)\n\n\n1. line4-9：继承ODL项目中的父pom\n2. line15：将packaging从jar改为bundle\n3. line18-48：为OSGI声明flexi plugin\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.opendaylight.controller</groupId>\n        <artifactId>commons.opendaylight</artifactId>\n        <version>1.4.0-SNAPSHOT</version>\n        <relativePath>../../../controller/opendaylight/commons/opendaylight</relativePath>\n    </parent>\n\n    <groupId>com.example</groupId>\n    <artifactId>mystats</artifactId>\n    <name>mystats</name>\n    <url>http://maven.apache.org</url>\n    <packaging>bundle</packaging>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.felix</groupId>\n                <artifactId>maven-bundle-plugin</artifactId>\n                <version>2.3.6</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <instructions>\n                        <Import-Package>\n                            org.opendaylight.controller.sal.core,\n                            org.opendaylight.controller.statisticsmanager,\n                            org.opendaylight.controller.switchmanager,\n                            org.opendaylight.controller.sal.utils,\n                            org.opendaylight.controller.sal.reader,\n                            org.opendaylight.controller.sal.flowprogrammer,\n                            org.opendaylight.controller.sal.match,\n                            org.slf4j,\n                            org.apache.felix.dm\n                        </Import-Package>\n                        <Bundle-Activator>\n                            com.example.mystats.Activator\n                        </Bundle-Activator>\n                        <Export-Package>\n                            com.example.mystats\n                        </Export-Package>\n                    </instructions>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>3.8.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.opendaylight.controller</groupId>\n            <artifactId>sal</artifactId>\n            <version>0.4.0-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>org.opendaylight.controller</groupId>\n            <artifactId>statisticsmanager</artifactId>\n            <version>0.4.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n\n","slug":"odl日志-MAVEN学习-3","published":1,"updated":"2015-10-07T14:27:47.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3cd000nggtu4igr4t3e"},{"title":"MAVEN学习-2","date":"2014-05-16T06:54:04.000Z","_content":"参考文献：\n1. [maven用途、核心概念、用法、常用参数和命令、扩展](http://trinea.iteye.com/blog/1290898)\n\n主要介绍maven常用参数和命令以及简单故障排除\n\n\n## mvn常用参数\nmvn -e 显示详细错误\nmvn -U 强制更新snapshot类型的插件或依赖库（否则maven一天只会更新一次snapshot依赖）\n**mvn -o 运行offline模式，不联网更新依赖**\n\n<!--more--> \n\n## Build Lifecycle中介绍的命令\nmvn test-compile 编译测试代码\nmvn test 运行程序中的单元测试\nmvn  compile 编译项目\nmvn package 打包，此时target目录下会出现maven-quickstart-1.0-SNAPSHOT.jar文件，即为打包后文件\nmvn install 打包并安装到本地仓库，此时本机仓库会新增maven-quickstart-1.0-SNAPSHOT.jar文件。\n每个phase都可以作为goal，如之前介绍的mvn clean install\n \n \n## maven 常用命令\nmvn archetype:generate 创建maven项目\nmvn package 打包，上面已经介绍过了\nmvn install 打包并安装到本地库\nmvn site 生成项目相关信息的网站\n \n\n## maven简单故障排除\n \nmvn -Dsurefire.useFile=false，如果执行单元测试出错，用该命令可以在console输出失败的单元测试及相关信息\nmvn -X， maven log level设定为debug在运行\nmvn --help ","source":"_posts/odl日志-MAVEN学习-2.md","raw":"title: MAVEN学习-2\ndate: 2014-05-16 14:54:04\ncategories: 学习Maven\ntags: [Maven]\n---\n参考文献：\n1. [maven用途、核心概念、用法、常用参数和命令、扩展](http://trinea.iteye.com/blog/1290898)\n\n主要介绍maven常用参数和命令以及简单故障排除\n\n\n## mvn常用参数\nmvn -e 显示详细错误\nmvn -U 强制更新snapshot类型的插件或依赖库（否则maven一天只会更新一次snapshot依赖）\n**mvn -o 运行offline模式，不联网更新依赖**\n\n<!--more--> \n\n## Build Lifecycle中介绍的命令\nmvn test-compile 编译测试代码\nmvn test 运行程序中的单元测试\nmvn  compile 编译项目\nmvn package 打包，此时target目录下会出现maven-quickstart-1.0-SNAPSHOT.jar文件，即为打包后文件\nmvn install 打包并安装到本地仓库，此时本机仓库会新增maven-quickstart-1.0-SNAPSHOT.jar文件。\n每个phase都可以作为goal，如之前介绍的mvn clean install\n \n \n## maven 常用命令\nmvn archetype:generate 创建maven项目\nmvn package 打包，上面已经介绍过了\nmvn install 打包并安装到本地库\nmvn site 生成项目相关信息的网站\n \n\n## maven简单故障排除\n \nmvn -Dsurefire.useFile=false，如果执行单元测试出错，用该命令可以在console输出失败的单元测试及相关信息\nmvn -X， maven log level设定为debug在运行\nmvn --help ","slug":"odl日志-MAVEN学习-2","published":1,"updated":"2015-10-07T14:27:58.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3co000sggtuy9ck90jr"},{"title":"MAVEN学习-1","date":"2014-05-16T04:54:04.000Z","_content":"参考文献：\n1. [maven用途、核心概念、用法、常用参数和命令、扩展](http://trinea.iteye.com/blog/1290898)\n2. [Maven官方文档](http://maven.apache.org/guides/index.html)\n3. [Maven权威指南](http://www.sonatype.com/books/maven-book/reference_zh/public-book.html)\n4. [maven安装](http://maven.apache.org/download.html)\n5. [理解maven的核心概念](http://www.cnblogs.com/holbrook/archive/2012/12/24/2830519.html)\n\n# MAVEN是什么\nMaven 是为 Java™ 开发人员提供的一个极为优秀的**构建工具**，也可以使用它来管理您的项目生命周期。\n作为一个生命周期管理工具，Maven 是基于阶段操作的，而不像 Ant 是基于 “任务” 构建的。\n\nMaven 完成项目生命周期的所有阶段，包括验证、代码生成、编译、测试、打包、集成测试、安装、部署、以及项目网站创建和部署。\n\n<!--more-->\n\n## Pom\npom是指project object Model。\n\npom是一个xml，是maven工作的基础，在执行task或者goal时，maven会去项目根目录下读取pom.xml获得需要的配置信息。\n\npom文件中包含了项目的信息和maven build项目所需的配置信息，通常有项目信息(如版本、成员)、项目的依赖、插件和goal、build选项等等\n\npom是可以继承的，通常对于一个大型的项目或是多个module的情况，子模块的pom需要指定父模块的pom。\n\n#####groupId:artifactId:version唯一确定了一个artifact\n\n### Pom里面的元素\n1. project pom文件的顶级元素\n  \n2. modelVersion 所使用的object model版本，为了确保稳定的使用，这个元素是强制性的。除非maven开发者升级模板，否则不需要修改  \n\n3. groupId 是项目创建团体或组织的唯一标志符，通常是域名倒写，如groupId  5. org.apache.maven.plugins就是为所有maven插件预留的  \n\n4. artifactId 是项目artifact唯一的基地址名  \n\n5. packaging artifact打包的方式，如jar、war、ear等等。默认为jar。这个不仅表示项目最终产生何种后缀的文件，也表示build过程使用什么样的<a target=\"_blank\" href=\"http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings\">lifecycle</a>。  \n\n5. version artifact的版本，通常能看见为类似0.0.1-SNAPSHOT，其中SNAPSHOT表示项目开发中，为开发版本  \n\n6. name 表示项目的展现名，在maven生成的文档中使用\n  \n7. url表示项目的地址，在maven生成的文档中使用\n  \n8. description 表示项目的描述，在maven生成的文档中使用\n  \n9. dependencies 表示依赖，在子节点dependencies中添加具体依赖的groupId artifactId和version\n  \n10. build 表示build配置 \n \n11. parent 表示父pom  \n\n\n### Repositories\nRepositories是用来存储Artifact的。如果说我们的项目产生的Artifact是一个个小工具，那么Repositories就是一个仓库，里面有我们自己创建的工具，也可以储存别人造的工具，我们在项目中需要使用某种工具时，在pom中声明dependency，编译代码时就会根据dependency去下载工具（Artifact），供自己使用。\n\n同时，自己的项目完成后可以通过mvn install命令将项目放到仓库（Repositories）中仓库分为本地仓库和远程仓库，远程仓库是指远程服务器上用于存储Artifact的仓库，本地仓库是指本机存储Artifact的仓库，在系统.m2/repository下面。\n\n### Denpendency\n依赖关系的管理是maven最为人称道的地方。一个工程可以依赖多个其他工程， 通过工程的唯一标识（groupId+artifactId+version)可以明确指明依赖的库及版本，而且能够处理 依赖关系的传递。 maven可以指定依赖的作用范围（scope）\n\n#### 更多依赖关系学习\n[ 一起学Maven(Maven的依赖管理特性)](http://blog.csdn.net/songdeitao/article/details/18765405)\n\n---\n## SVM\n这里说的版本管理（version management）不是指版本控制（version control）\n\n版本管理中说得版本是指构件（artifact）的版本，而**非源码**的版本（如subversion中常见的rXXX，或者git中一次提交都有个sha1的commit号）\n\n### SNAPSHOT\n\nMaven有SNAPSHOT版本的概念，它与release版本对应，后者是指1.0，1.1，2.0这样稳定的发布版本。\n\n假设现在乙可以将B的版本设置成1.0-SNAPSHOT，每次更改后，都`mvn deploy`到nexus中，每次deploy，maven都会将SNAPSHOT改成一个当前时间的timestamp，比如B-1.0-SNAPSHOT.jar到nexus中后，会成为这个样子：B-1.0-20081017-020325-13.jar。\nMaven在处理A中对于B的SNAPSHOT依赖时，会根据这样的timestamp下载最新的jar，默认Maven每天 更新一次，如果你想让Maven**强制更新**，可以使用-U参数，如：`mvn clean install -U` 。\n\n现在事情简化成了这个样子：乙做更改，然后mvn deploy，甲用最简单的maven命令就能得到最新的B。\n\n---\n## Archetype\nmaven创建项目是根据Archetype（原型）创建\n\nArchetype对于项目的作用就相当于模具对于工具的作用，我们想做一个锤子，将铁水倒入模具成型后，稍加修改就可以了。\n\n我们可以根据项目类型的需要使用不同的Archetype创建项目。通过Archetype我们可以快速标准的创建项目。利用Archetype创建完项目后都有标准的文件夹目录结构。\n\n### quick start工程\n\n创建一个简单的quick start项目，指定 -DarchetypeArtifactId为maven-archetype-quickstart，如下命令\n```xml\nmvn archetype:generate \\\n-DgroupId=org.amson.openflow \\\n-DartifactId=testing \\\n-DarchetypeArtifactId=maven-archetype-quickstart \\\n-DinteractiveMode=false\n```  \n其中DgroupId指定groupId，DartifactId指定artifactId，DarchetypeArtifactId指定ArchetypeId，DinteractiveMode表示是否使用交互模式，交互模式会让用户填写版本信息之类的，非交互模式采用默认值。这样我们便建好了一个简单的maven项目。\n\n（也可以利用eclipse简单方便快捷创建maven项目）\n","source":"_posts/odl日志-MAVEN学习-1.md","raw":"title: MAVEN学习-1\ndate: 2014-05-16 12:54:04\ncategories: 学习Maven\ntags: [Maven]\n---\n参考文献：\n1. [maven用途、核心概念、用法、常用参数和命令、扩展](http://trinea.iteye.com/blog/1290898)\n2. [Maven官方文档](http://maven.apache.org/guides/index.html)\n3. [Maven权威指南](http://www.sonatype.com/books/maven-book/reference_zh/public-book.html)\n4. [maven安装](http://maven.apache.org/download.html)\n5. [理解maven的核心概念](http://www.cnblogs.com/holbrook/archive/2012/12/24/2830519.html)\n\n# MAVEN是什么\nMaven 是为 Java™ 开发人员提供的一个极为优秀的**构建工具**，也可以使用它来管理您的项目生命周期。\n作为一个生命周期管理工具，Maven 是基于阶段操作的，而不像 Ant 是基于 “任务” 构建的。\n\nMaven 完成项目生命周期的所有阶段，包括验证、代码生成、编译、测试、打包、集成测试、安装、部署、以及项目网站创建和部署。\n\n<!--more-->\n\n## Pom\npom是指project object Model。\n\npom是一个xml，是maven工作的基础，在执行task或者goal时，maven会去项目根目录下读取pom.xml获得需要的配置信息。\n\npom文件中包含了项目的信息和maven build项目所需的配置信息，通常有项目信息(如版本、成员)、项目的依赖、插件和goal、build选项等等\n\npom是可以继承的，通常对于一个大型的项目或是多个module的情况，子模块的pom需要指定父模块的pom。\n\n#####groupId:artifactId:version唯一确定了一个artifact\n\n### Pom里面的元素\n1. project pom文件的顶级元素\n  \n2. modelVersion 所使用的object model版本，为了确保稳定的使用，这个元素是强制性的。除非maven开发者升级模板，否则不需要修改  \n\n3. groupId 是项目创建团体或组织的唯一标志符，通常是域名倒写，如groupId  5. org.apache.maven.plugins就是为所有maven插件预留的  \n\n4. artifactId 是项目artifact唯一的基地址名  \n\n5. packaging artifact打包的方式，如jar、war、ear等等。默认为jar。这个不仅表示项目最终产生何种后缀的文件，也表示build过程使用什么样的<a target=\"_blank\" href=\"http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings\">lifecycle</a>。  \n\n5. version artifact的版本，通常能看见为类似0.0.1-SNAPSHOT，其中SNAPSHOT表示项目开发中，为开发版本  \n\n6. name 表示项目的展现名，在maven生成的文档中使用\n  \n7. url表示项目的地址，在maven生成的文档中使用\n  \n8. description 表示项目的描述，在maven生成的文档中使用\n  \n9. dependencies 表示依赖，在子节点dependencies中添加具体依赖的groupId artifactId和version\n  \n10. build 表示build配置 \n \n11. parent 表示父pom  \n\n\n### Repositories\nRepositories是用来存储Artifact的。如果说我们的项目产生的Artifact是一个个小工具，那么Repositories就是一个仓库，里面有我们自己创建的工具，也可以储存别人造的工具，我们在项目中需要使用某种工具时，在pom中声明dependency，编译代码时就会根据dependency去下载工具（Artifact），供自己使用。\n\n同时，自己的项目完成后可以通过mvn install命令将项目放到仓库（Repositories）中仓库分为本地仓库和远程仓库，远程仓库是指远程服务器上用于存储Artifact的仓库，本地仓库是指本机存储Artifact的仓库，在系统.m2/repository下面。\n\n### Denpendency\n依赖关系的管理是maven最为人称道的地方。一个工程可以依赖多个其他工程， 通过工程的唯一标识（groupId+artifactId+version)可以明确指明依赖的库及版本，而且能够处理 依赖关系的传递。 maven可以指定依赖的作用范围（scope）\n\n#### 更多依赖关系学习\n[ 一起学Maven(Maven的依赖管理特性)](http://blog.csdn.net/songdeitao/article/details/18765405)\n\n---\n## SVM\n这里说的版本管理（version management）不是指版本控制（version control）\n\n版本管理中说得版本是指构件（artifact）的版本，而**非源码**的版本（如subversion中常见的rXXX，或者git中一次提交都有个sha1的commit号）\n\n### SNAPSHOT\n\nMaven有SNAPSHOT版本的概念，它与release版本对应，后者是指1.0，1.1，2.0这样稳定的发布版本。\n\n假设现在乙可以将B的版本设置成1.0-SNAPSHOT，每次更改后，都`mvn deploy`到nexus中，每次deploy，maven都会将SNAPSHOT改成一个当前时间的timestamp，比如B-1.0-SNAPSHOT.jar到nexus中后，会成为这个样子：B-1.0-20081017-020325-13.jar。\nMaven在处理A中对于B的SNAPSHOT依赖时，会根据这样的timestamp下载最新的jar，默认Maven每天 更新一次，如果你想让Maven**强制更新**，可以使用-U参数，如：`mvn clean install -U` 。\n\n现在事情简化成了这个样子：乙做更改，然后mvn deploy，甲用最简单的maven命令就能得到最新的B。\n\n---\n## Archetype\nmaven创建项目是根据Archetype（原型）创建\n\nArchetype对于项目的作用就相当于模具对于工具的作用，我们想做一个锤子，将铁水倒入模具成型后，稍加修改就可以了。\n\n我们可以根据项目类型的需要使用不同的Archetype创建项目。通过Archetype我们可以快速标准的创建项目。利用Archetype创建完项目后都有标准的文件夹目录结构。\n\n### quick start工程\n\n创建一个简单的quick start项目，指定 -DarchetypeArtifactId为maven-archetype-quickstart，如下命令\n```xml\nmvn archetype:generate \\\n-DgroupId=org.amson.openflow \\\n-DartifactId=testing \\\n-DarchetypeArtifactId=maven-archetype-quickstart \\\n-DinteractiveMode=false\n```  \n其中DgroupId指定groupId，DartifactId指定artifactId，DarchetypeArtifactId指定ArchetypeId，DinteractiveMode表示是否使用交互模式，交互模式会让用户填写版本信息之类的，非交互模式采用默认值。这样我们便建好了一个简单的maven项目。\n\n（也可以利用eclipse简单方便快捷创建maven项目）\n","slug":"odl日志-MAVEN学习-1","published":1,"updated":"2015-10-07T14:28:04.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3cs000vggtuyw6lzsza"},{"title":"4.SQL学习：SQL高级语法","date":"2015-04-10T08:36:20.000Z","description":"主要学习了：字符集、校对集；触发器；事务；索引以及存储过程","_content":"#字符集\nMysql的字符集设置非常灵活，可以设置服务器默认的字符集\n- 数据库默认字符集\n- 表默认字符集\n- 列字符集\n- 某个级别没有指定的话，直接继承上一级\n\n##以表声明为UTF8为例\n```sql\nCREATE TABLE a(\nid int\n)CHARSET UTF8;\n```\n- 存储在数据表中的数据最终是UTF8\n\n### 客户端与服务器\n客户端是GBK编码，服务器是UTF8编码\n![服务器与客户端字符集](http://askingwindy-gitcafe.qiniudn.com/SQL字符集.png)\n#### SQL语句字符集\n客户端(GBK) ===> 字符集链接器(GBK(来自客户端)->GBK(连接器)->UTF8(发给服务器))===>服务器（UTF8\n1. 告诉服务器，我给你发送的数据是什么编码\n```sql\nSET CHARACTER_SET_CLIENT = GBK;\n```\n2. 告诉连接器，转化成什么编码\n```sql\nSET CHARACTER_SET_CONNECTION = GBK;#指定的是连接器中中间的那个GBK\n```\n3. 查询结果是什么编码\n```sql\nSET CHARACTER_SET_RESULTS = GBK;\n```\n\n### 什么时候出现乱码\n1. 客户端声明的字符集与事实不符\n2. 查询结果字符集与客户端页面不符合\n\n#校对集\n就是排队规则，一个字符集可以有一个或多个排序规则\n##以UTF8为例\n默认使用`UTF8-GENERAL-CI`\n###如何声明校对集\n```sql\nCREATE TABLE T(\nid int\n)CHARSET UTF8 COLLATE UTF8_BIN; #按二进制排序\n```\n###查看校对集\n```sql\nSHOW COLLATION\n```\n***\n#触发器\n作用：监视某种情况，并触发某种操作\n- 能触发的操作：增、删、改\n- 能监视的操作：增、删、改\n\n应用场合：向一张表添加、删除时，需要在相关的表中进行同步\n##触发器创建四要素\n| 名字 | 语法 |\n|--------|--------|\n|   监视地点     |    TABLE    |\n|监视事件|INSERT/UPDATE/DELETE|\n|触发时间|AFTER/BEFORE|\n|触发事件|INSERT/UPDATE/DELETE|\n\n### 创建触发器语法\n```sql\nCREATE TRIGGER 触发器名字\nAFTER/BEFORE INSERT/UPDATE/DELETE ON 表名\nFOR EACH ROW #固定语句\nBEGIN\nsql语句（限于增删改），一句或多句;\nEND ||\n```\n###删除触发器语法\n```sql\nDROP TRIGGER 触发器名字;\n```\n###查看触发器\n```sql\nSHOW TRIGGERS;\n```\n##实例：订单与库存管理\n触发时间：`AFTER`\n###准备工作\n```sql\n#建立商品表\nCREATE TABLE g(\nid int,\nname varchar(10),\nnum int\n)CHARSET UTF8;\n#建立订单表\nCREATE TABLE o(\noid int,\ngid int,\nmuch int\n)CHARSET UTF8;\n\nINSERT INTO g\nVALUES\n(1, '猪', 22),\n(2,'羊', 19),\n(3,'狗', 12),\n(4,'猫', 8);\n\nINSERT INTO o\nVALUES\n(1,2,3);\n\n#手动更新\nUPDATE g SET num = num-3\nWHERE id = 2;\n```\n\n###增加一个订单\n要求：增加订单，库存数量相应变化\n\n- 监视地点：o表\n- 监视操作：INSERT\n- 触发操作：UPDATE\n- 触发时间：AFTER\n\n####建立简单触发器\n每一次只能对id=2的num进行操作\n```sql\n#改变结束符\nDELIMITER || #结束符为||,注意后面没有分号\n\n#建立触发器\nCREATE TRIGGER tg1\nAFTER INSERT ON o\nFOR EACH ROW\nBEGIN\nUPDATE g SET NUM = NUM-3 WHERE id = 2;\nEND ||\n```\n####如何在触发器引用行的值\n- 对于`INSERT`而言，新增的行用`NEW`来表示\n\t- 行中每一列的值，用`NEW.列名`来表示\n- 对于`DELETE`而言，删除的行的值用`OLD.列名`来表示\n- 对于`UPDATE`而言，修改前的行中的值用`OLD.列名`来引用，而修改后的数据用`NEW.列名`来引用\n\n####简单触发器升级版\n\n```sql\nCREATE TRIGGER tg2\nAFTER INSERT ON o\nFOR EACH ROW\nBEGIN\nUPDATE g SET NUM = NUM - NEW.much WHERE id = NEW.gid;\nEND ||\n```\n### 删除一个订单\n\n```sql\nCREATE TRIGGER tg3\nAFTER DELETE ON o\nFOR EACH ROW \nBEGIN\nUPDATE g SET NUM = NUM + OLD.much WHERE id = OLD.gid;\nEND ||\n```\n### 更新一个订单\n```sql\nCREATE TRIGGER tg4\nAFTER UPDATE ON o\nFOR EACH ROW\nBEGIN\nUPDATE g SET NUM = NUM + OLD.much WHERE id = OLD.gid;\nUPDATE g SET NUM = NUM - NEW.much WHERE id = NEW.gid;\nEND ||\n```\n##`AFTER`和`BEFORE`区别\n- `AFTER`:先完成数据的增删改，在触发\n\t- 触发语句晚于增删改，无法影响前面的增删改\n- `BEFORE`：先完成触发，再完成增删改\n\t- 触发语句先于监视的增删改发生  \n\n### 典型案例\n对于所下订单进行判断，如果订单数量>5， 认为是恶意订单，强制把所定商品数量改成5\n#### 触发器四要素\n1. 监视地点: o\n2. 监视事件：INSERT\n3. 触发事件：UPDATE\n4. 触发事件: BEFORE\n\n```sql\nCREATE TRIGGER tg5\nBEFORE INSERT ON o\nFOR EACH ROW\nBEGIN\n    IF NEW.much > 5 THEN\n        SET NEW.much = 5;\n    END IF;\n    UPDATE g SET NUM = NUM - NEW.much WHERE id = NEW.gid;\nEND ||\n```\n***\n# 事务\n## 存储引擎\n对于用户而言，同样一张表无论用什么引擎来存储，用户看到的数据是一样的，但是对于**服务器**而言有区别\n```sql\nCREATE TABLE account(\nid int\nmondy int\n)ENGINE INNODB CHARSET UTF8;\n```\n### 常用表的引擎\n|特点| MYISAM | INNODB |\n|--------|--------|--------|\n|  批量插入的速度|高      | 低       |\n|事物安全| |支持|\n|全文索引|支持| 支持|\n|锁机制|表锁|行锁|\n|B树索引|支持|支持\n|哈希表索引||支持\n##事务的引擎\nINNODB或者BDB（使用不多）\n##事务的ACID特性\n- 通俗的说事物，指一组操作，要么都成功执行，要么都不执行 ==> **原子性**\n- 在所有操作没有执行完毕之前，其他会话不能看到中间改变的过程 ==> **隔离性**\n- 事务发生前后，数据总额匹配 ===> **一致性**\n- 事物产生的影响不能够撤销 ===> **持久性**\n\t- 如果出了错误，事物不允许撤销，只能通过“补偿性事务” \n\n##事务的语法\n在`COMMIT`前，整个事务是隔离的，其他窗口无法见到操作结果\n```sql\n#开启事务\nSTART TRANSACTION;\n#SQL语句操作\n...\n#提交事务\nCOMMIT;#提交\n#或者：ROLLBACK; #回滚\n```\n### 显式提交事务\n在一个事务`COMMIT`或者`ROLLBACK`后，事务结束。下次使用需要再次开启事务。\n有些语句会默认提交事务，例如：`START TRANSACTION;`\n![事务与普通语句的比较](http://askingwindy-gitcafe.qiniudn.com/事务.png)\n\n***\n# 索引\n索引是针对数据建立的目录\n作用：加快查询速度\n坏处：\n- 降低增删改的速度\n- 增大了表的文件大小（索引文件甚至可能比数据文件还大）\n\n##案例\n设新闻表有15列10行，共500W行数据，如何快速导入？\n1. 空白索引全部删除\n2. 导入数据\n3. 数据导入完毕后，集中建立索引\n\n## 索引原则\n1. 不过度索引\n2. 建立索引条件列:\n\t- `WHERE`后面最频繁的条件比较适宜索引\n3. 索引散列值，过于集中的值不要索引（没有意义）\n\n## 索引类型\n| 索引名    | 普通索引   |  唯一索引 |  主键索引 | 全文索引  |\n|----------|----------|----------|----------|----------|\n|作用       |   仅是加快查询速度   |   行上的值不能重复     |主键必唯一，但是唯一索引不一定是主键| 在mysql默认情况下，对中文意义不大|\n|声明语法|`INDEX`|`UNIQUE`|`PRIMARY KEY`|`FULLTEXT`|\n|默认类型|BTREE|BTREE|BTREE|FULLTEXT|\n\n- 一张表上只能有一个主键，但是可以有一个或多个唯一索引\n\n###FULLTEXT\n全文索引对中文意义不大\n因为英文中有空格、标点符号来拆单词，从而对单词进行索引\n而中文没有空格来隔开单词，mysql无法识别每个中文词\n####用法\n``` sql\nSELECT * FROM MATCH (索引名) AGAINSET ('索引词');\n```\n####全文索引停止词\n全文索引不针对非常频繁的词做索引，如：this, is, you等\n## 索引语句\n###查看一张表的索引\n```sql\nSHOW INDEX FROM 表名\n```\n###建立索引\n```sql\nALTER TABLE 表名 ADD INDEX/UNIQUE/FULLTEXT [索引名](列名) #索引名可选\n/PRIMARY KEY #主键值不需要索引名的\n```\n\n```sql\nCREATE TABLE member(\nid int,\nemail varchar(20),\ntel char(11),\nintro text\n)ENGINE MYISAM CHARSET UTF8;\n\n#给tel列加一个普通的索引\nALTER TABLE member ADD INDEX tel(tel);\n#给email加一个唯一索引\nALTER TABLE member ADD UNIQUE (email);\n#给intro加一个全文索引\nALTER TABLE member ADD FULLTEXT (intro);\n#给id加一个主键索引\nALTER TABLE MEMBER ADD PRIMARY KEY (id);\n```\n###删除索引\n```sql\n#删除非主键索引\nALTER TABLE 表名 DROP INDEX 索引名;\n#删除主键索引\nALTER TABLE 表名 DROP PRIMARY KEY;\n```\n***\n#存储过程\n概念类似函数，就是把一段代码封装起来\n当执行这一段代码的时候，可以调用该存储过程来执行。\n\n在封装的语句体里，可以用if/else, case,while等控制结构：可以进行sql编程\n\n##存储过程语法\n###新建一个存储过程\n```sql\nCREATE PROCEDURE 存储过程名字()\nBEGIN\n  #SQL语句\nEND||\n```\n###查看现有的存储过程\n```sql\nSHOW PROCEDURE STATUS;\n```\n###删除存储过程\n```sql\nDROP PROCEDURE 存储过程名字;\n```\n###调用存储过程\n```sql\nCALL 存储过程名字();\n```","source":"_posts/SQL学习-Part4-SQL高级语法.md","raw":"title: \"4.SQL学习：SQL高级语法\"\ndate: 2015-04-10 16:36:20\ntags: [SQL基本知识]\ncategories: SQL\ndescription: 主要学习了：字符集、校对集；触发器；事务；索引以及存储过程\n---\n#字符集\nMysql的字符集设置非常灵活，可以设置服务器默认的字符集\n- 数据库默认字符集\n- 表默认字符集\n- 列字符集\n- 某个级别没有指定的话，直接继承上一级\n\n##以表声明为UTF8为例\n```sql\nCREATE TABLE a(\nid int\n)CHARSET UTF8;\n```\n- 存储在数据表中的数据最终是UTF8\n\n### 客户端与服务器\n客户端是GBK编码，服务器是UTF8编码\n![服务器与客户端字符集](http://askingwindy-gitcafe.qiniudn.com/SQL字符集.png)\n#### SQL语句字符集\n客户端(GBK) ===> 字符集链接器(GBK(来自客户端)->GBK(连接器)->UTF8(发给服务器))===>服务器（UTF8\n1. 告诉服务器，我给你发送的数据是什么编码\n```sql\nSET CHARACTER_SET_CLIENT = GBK;\n```\n2. 告诉连接器，转化成什么编码\n```sql\nSET CHARACTER_SET_CONNECTION = GBK;#指定的是连接器中中间的那个GBK\n```\n3. 查询结果是什么编码\n```sql\nSET CHARACTER_SET_RESULTS = GBK;\n```\n\n### 什么时候出现乱码\n1. 客户端声明的字符集与事实不符\n2. 查询结果字符集与客户端页面不符合\n\n#校对集\n就是排队规则，一个字符集可以有一个或多个排序规则\n##以UTF8为例\n默认使用`UTF8-GENERAL-CI`\n###如何声明校对集\n```sql\nCREATE TABLE T(\nid int\n)CHARSET UTF8 COLLATE UTF8_BIN; #按二进制排序\n```\n###查看校对集\n```sql\nSHOW COLLATION\n```\n***\n#触发器\n作用：监视某种情况，并触发某种操作\n- 能触发的操作：增、删、改\n- 能监视的操作：增、删、改\n\n应用场合：向一张表添加、删除时，需要在相关的表中进行同步\n##触发器创建四要素\n| 名字 | 语法 |\n|--------|--------|\n|   监视地点     |    TABLE    |\n|监视事件|INSERT/UPDATE/DELETE|\n|触发时间|AFTER/BEFORE|\n|触发事件|INSERT/UPDATE/DELETE|\n\n### 创建触发器语法\n```sql\nCREATE TRIGGER 触发器名字\nAFTER/BEFORE INSERT/UPDATE/DELETE ON 表名\nFOR EACH ROW #固定语句\nBEGIN\nsql语句（限于增删改），一句或多句;\nEND ||\n```\n###删除触发器语法\n```sql\nDROP TRIGGER 触发器名字;\n```\n###查看触发器\n```sql\nSHOW TRIGGERS;\n```\n##实例：订单与库存管理\n触发时间：`AFTER`\n###准备工作\n```sql\n#建立商品表\nCREATE TABLE g(\nid int,\nname varchar(10),\nnum int\n)CHARSET UTF8;\n#建立订单表\nCREATE TABLE o(\noid int,\ngid int,\nmuch int\n)CHARSET UTF8;\n\nINSERT INTO g\nVALUES\n(1, '猪', 22),\n(2,'羊', 19),\n(3,'狗', 12),\n(4,'猫', 8);\n\nINSERT INTO o\nVALUES\n(1,2,3);\n\n#手动更新\nUPDATE g SET num = num-3\nWHERE id = 2;\n```\n\n###增加一个订单\n要求：增加订单，库存数量相应变化\n\n- 监视地点：o表\n- 监视操作：INSERT\n- 触发操作：UPDATE\n- 触发时间：AFTER\n\n####建立简单触发器\n每一次只能对id=2的num进行操作\n```sql\n#改变结束符\nDELIMITER || #结束符为||,注意后面没有分号\n\n#建立触发器\nCREATE TRIGGER tg1\nAFTER INSERT ON o\nFOR EACH ROW\nBEGIN\nUPDATE g SET NUM = NUM-3 WHERE id = 2;\nEND ||\n```\n####如何在触发器引用行的值\n- 对于`INSERT`而言，新增的行用`NEW`来表示\n\t- 行中每一列的值，用`NEW.列名`来表示\n- 对于`DELETE`而言，删除的行的值用`OLD.列名`来表示\n- 对于`UPDATE`而言，修改前的行中的值用`OLD.列名`来引用，而修改后的数据用`NEW.列名`来引用\n\n####简单触发器升级版\n\n```sql\nCREATE TRIGGER tg2\nAFTER INSERT ON o\nFOR EACH ROW\nBEGIN\nUPDATE g SET NUM = NUM - NEW.much WHERE id = NEW.gid;\nEND ||\n```\n### 删除一个订单\n\n```sql\nCREATE TRIGGER tg3\nAFTER DELETE ON o\nFOR EACH ROW \nBEGIN\nUPDATE g SET NUM = NUM + OLD.much WHERE id = OLD.gid;\nEND ||\n```\n### 更新一个订单\n```sql\nCREATE TRIGGER tg4\nAFTER UPDATE ON o\nFOR EACH ROW\nBEGIN\nUPDATE g SET NUM = NUM + OLD.much WHERE id = OLD.gid;\nUPDATE g SET NUM = NUM - NEW.much WHERE id = NEW.gid;\nEND ||\n```\n##`AFTER`和`BEFORE`区别\n- `AFTER`:先完成数据的增删改，在触发\n\t- 触发语句晚于增删改，无法影响前面的增删改\n- `BEFORE`：先完成触发，再完成增删改\n\t- 触发语句先于监视的增删改发生  \n\n### 典型案例\n对于所下订单进行判断，如果订单数量>5， 认为是恶意订单，强制把所定商品数量改成5\n#### 触发器四要素\n1. 监视地点: o\n2. 监视事件：INSERT\n3. 触发事件：UPDATE\n4. 触发事件: BEFORE\n\n```sql\nCREATE TRIGGER tg5\nBEFORE INSERT ON o\nFOR EACH ROW\nBEGIN\n    IF NEW.much > 5 THEN\n        SET NEW.much = 5;\n    END IF;\n    UPDATE g SET NUM = NUM - NEW.much WHERE id = NEW.gid;\nEND ||\n```\n***\n# 事务\n## 存储引擎\n对于用户而言，同样一张表无论用什么引擎来存储，用户看到的数据是一样的，但是对于**服务器**而言有区别\n```sql\nCREATE TABLE account(\nid int\nmondy int\n)ENGINE INNODB CHARSET UTF8;\n```\n### 常用表的引擎\n|特点| MYISAM | INNODB |\n|--------|--------|--------|\n|  批量插入的速度|高      | 低       |\n|事物安全| |支持|\n|全文索引|支持| 支持|\n|锁机制|表锁|行锁|\n|B树索引|支持|支持\n|哈希表索引||支持\n##事务的引擎\nINNODB或者BDB（使用不多）\n##事务的ACID特性\n- 通俗的说事物，指一组操作，要么都成功执行，要么都不执行 ==> **原子性**\n- 在所有操作没有执行完毕之前，其他会话不能看到中间改变的过程 ==> **隔离性**\n- 事务发生前后，数据总额匹配 ===> **一致性**\n- 事物产生的影响不能够撤销 ===> **持久性**\n\t- 如果出了错误，事物不允许撤销，只能通过“补偿性事务” \n\n##事务的语法\n在`COMMIT`前，整个事务是隔离的，其他窗口无法见到操作结果\n```sql\n#开启事务\nSTART TRANSACTION;\n#SQL语句操作\n...\n#提交事务\nCOMMIT;#提交\n#或者：ROLLBACK; #回滚\n```\n### 显式提交事务\n在一个事务`COMMIT`或者`ROLLBACK`后，事务结束。下次使用需要再次开启事务。\n有些语句会默认提交事务，例如：`START TRANSACTION;`\n![事务与普通语句的比较](http://askingwindy-gitcafe.qiniudn.com/事务.png)\n\n***\n# 索引\n索引是针对数据建立的目录\n作用：加快查询速度\n坏处：\n- 降低增删改的速度\n- 增大了表的文件大小（索引文件甚至可能比数据文件还大）\n\n##案例\n设新闻表有15列10行，共500W行数据，如何快速导入？\n1. 空白索引全部删除\n2. 导入数据\n3. 数据导入完毕后，集中建立索引\n\n## 索引原则\n1. 不过度索引\n2. 建立索引条件列:\n\t- `WHERE`后面最频繁的条件比较适宜索引\n3. 索引散列值，过于集中的值不要索引（没有意义）\n\n## 索引类型\n| 索引名    | 普通索引   |  唯一索引 |  主键索引 | 全文索引  |\n|----------|----------|----------|----------|----------|\n|作用       |   仅是加快查询速度   |   行上的值不能重复     |主键必唯一，但是唯一索引不一定是主键| 在mysql默认情况下，对中文意义不大|\n|声明语法|`INDEX`|`UNIQUE`|`PRIMARY KEY`|`FULLTEXT`|\n|默认类型|BTREE|BTREE|BTREE|FULLTEXT|\n\n- 一张表上只能有一个主键，但是可以有一个或多个唯一索引\n\n###FULLTEXT\n全文索引对中文意义不大\n因为英文中有空格、标点符号来拆单词，从而对单词进行索引\n而中文没有空格来隔开单词，mysql无法识别每个中文词\n####用法\n``` sql\nSELECT * FROM MATCH (索引名) AGAINSET ('索引词');\n```\n####全文索引停止词\n全文索引不针对非常频繁的词做索引，如：this, is, you等\n## 索引语句\n###查看一张表的索引\n```sql\nSHOW INDEX FROM 表名\n```\n###建立索引\n```sql\nALTER TABLE 表名 ADD INDEX/UNIQUE/FULLTEXT [索引名](列名) #索引名可选\n/PRIMARY KEY #主键值不需要索引名的\n```\n\n```sql\nCREATE TABLE member(\nid int,\nemail varchar(20),\ntel char(11),\nintro text\n)ENGINE MYISAM CHARSET UTF8;\n\n#给tel列加一个普通的索引\nALTER TABLE member ADD INDEX tel(tel);\n#给email加一个唯一索引\nALTER TABLE member ADD UNIQUE (email);\n#给intro加一个全文索引\nALTER TABLE member ADD FULLTEXT (intro);\n#给id加一个主键索引\nALTER TABLE MEMBER ADD PRIMARY KEY (id);\n```\n###删除索引\n```sql\n#删除非主键索引\nALTER TABLE 表名 DROP INDEX 索引名;\n#删除主键索引\nALTER TABLE 表名 DROP PRIMARY KEY;\n```\n***\n#存储过程\n概念类似函数，就是把一段代码封装起来\n当执行这一段代码的时候，可以调用该存储过程来执行。\n\n在封装的语句体里，可以用if/else, case,while等控制结构：可以进行sql编程\n\n##存储过程语法\n###新建一个存储过程\n```sql\nCREATE PROCEDURE 存储过程名字()\nBEGIN\n  #SQL语句\nEND||\n```\n###查看现有的存储过程\n```sql\nSHOW PROCEDURE STATUS;\n```\n###删除存储过程\n```sql\nDROP PROCEDURE 存储过程名字;\n```\n###调用存储过程\n```sql\nCALL 存储过程名字();\n```","slug":"SQL学习-Part4-SQL高级语法","published":1,"updated":"2015-10-07T14:25:35.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3dg000yggtu1iuyc0f9"},{"title":"3.SQL学习：多表连接","date":"2015-04-09T02:36:30.000Z","description":"主要学习了多表连接查询：`LEFT JOIN`、`RIGHT JOIN`、`INNER JOIN` 以及视图","_content":"#Pre：表\n一张表就是一个集合，一行数据是集合的一个元素\n\n* 理论上讲，不可能出现完全相同的两个行（所以union去重复了）\n* 但是，表中可以存在完全的两行（表内部的rowid是不可重复的，这个rowid看不见）\n* 集合相乘，就是笛卡尔积，两个集合的完全组合\n\n* * *\n\n#连接查询\n1. 两个表连接在一起\n2. 连接条件\n\n##语法\n###左连接(LEFT JOIN)\n以左表为准，去右表找匹配数据\n- 找不到用NULL补齐\n- 表A LEFT JOIN 表B = 表B RIGHT JOIN 表A\n\n```sql\nSELECT  列1， 列2， 列N FROM\ntableA LEFT JOIN tableB\nON tableA.列 = tableB.列 #此处表连接成为一张大表，完全当成普通表看\n#后面可加 WHERE, GROUP BY, HAVING, ORDER BY, LIMIT\n```\n###右连接(RIGHT JOIN)\n左连接：A站在B的左边，以A为准\n右连接：B站在A的右边，以A为准\n####如何记忆\n1. 可以把右连接转换为左连接\n2. 推荐把右连接转化为左连接（推荐使用左连接代替右连接）\n\n```sql\nSELECT  列1， 列2， 列N FROM\ntableA RIGHT JOIN tableB\nON tableA.列 = tableB.列 \n```\n###内连接(INNER JOIN)\n查询左右表都有的数据，即不要左/右中NULL的那一部分。\n内连接是左右连接的交集\n###外连接OUTER JOIN\n- 查出左右连接的并集\n- 可以用UNION达到目的（左连接UNION右连接）\n\n```sql\nSELECT  列1， 列2， 列N FROM\ntableA INNER JOIN tableB\nON tableA.列 = tableB.列\n```\n\n- - -\n\n##面试题\nMatch赛程表：\n\n| 字段名称 | 字段类型 |描述|\n|--------|--------|--|\n|    matchId    |  int      |主键|\n|hostTeamId|int|主队ID|\n|guestTeamId|int|客队ID|\n|matchResult|varchar(20)|比赛结果，如:(2:0)|\n|matchTime|date|比赛开始时间|\n\nTeam参赛队伍表：\n\n| 字段名称 |\t字段类型\t|\t描述\t|\n|--------|--------|--|\n|teamId|int|主键|\n|teamName|varchar(10)|队伍名称|\n\nMatch的hostTeamID与Team中的teamId关联\n查出2006-6-1到2007-7-1之间举行的所有比赛，并且用一下形式列出：\n\n|hostTeamId |matchResult|\tguestTeamId|matchTime|\n|---|---|---|---|\n|拜仁 |2:0|\t\t不莱梅|\t\t2006-06-21|\n\n###创建表\n```sql\n#创建表并插入数据\nCREATE TABLE m(\nmatchid int PRIMARY KEY AUTO_INCREMENT,\nhid int,\ngid int,\nresult varchar(20),\nmtime date\n);\n\nINSERT INTO m\n(hid, gid, result, mtime)\nVALUES\n(1,2,'2:0','2006-05-21'),\n(2,3,'1:2','2006-06-21'),\n(3,1,'2:5','2006-06-25'),\n(2,1,'4:2','2006-07-21');\n\nCREATE TABLE t(\ntid int,\ntname varchar(10)\n);\n\nINSERT INTO t\nVALUES\n(1, '国安'),\n(2, '申花'),\n(3, '全兴');\n```\n###解题步骤\n将问题分解为小问题\n####1：先弄对输出顺序\n```sql\nSELECT hid, result, gid, mtime FROM m;\n```\n####2：再取出主队名字\n做连接\n```sql\nSELECT hid, tname AS hname, result, gid,mtime \nFROM\nm LEFT JOIN t\nON m.hid = t.tid;\n```\n####3：再取出客队名字\n再一次左连接\n```sql\nSELECT hid, t1.tname AS hname, result, gid, t2.tname AS gname, mtime \nFROM\nm LEFT JOIN t AS t1\nON m.hid = t1.tid\n#左连接两次\nLEFT JOIN t AS t2\nON m.gid = t2.tid;\n```\n####4:限制时间\n```sql\nSELECT hid, t1.tname AS hname, result, gid, t2.tname AS gname, mtime \nFROM\nm LEFT JOIN t AS t1\nON m.hid = t1.tid\n\nLEFT JOIN t AS t2\nON m.gid = t2.tid\n\nWHERE mtime \nBETWEEN '2006-06-01' AND '2006-07-01';\n```\n####5:输出格式更改\n```sql\nSELECT t1.tname AS hname, result, t2.tname AS gname, mtime \nFROM\nm LEFT JOIN t AS t1\nON m.hid = t1.tid\n\nLEFT JOIN t AS t2\nON m.gid = t2.tid\n\nWHERE mtime \nBETWEEN '2006-06-01' AND '2006-07-01';\n```\n***\n#视图\n视图是由查询结果形成的一张虚拟表\n##语法\n###创建视图\n```sql\nCREATE VIEW 视图名\nAS SELECT 语句\n```\n###删除视图\n```sql\nDRIP VIEW 视图名\n```\n###修改视图\n```sql\nALTER VIEW 视图名 \nAS SELECT 语句\n```\n##视图的作用\n1. 简化查询\n2. 进行权限控制\n\t- 把表的权限封闭，但是开放相应的视图权限，视图只开放部分数据\n3. 大数据分表时用到\n\t- 表的行数超过200w，速度很慢==>把1张表的数据拆成4张表来存放\n\n##视图的algorithm\n```sql\nCREATE ALGORITHM = 规则 VIEW 视图名 ...\n```\n### `MERGE`\n当引用视图时，引用视图的语句与定义视图的语句合并\n- 当查询视图时，把查询视图的语句（`WHERE`那些）与创建视图的语句合并，分析形成一条新的`SELECT`语句\n\n### `TEMPTABLE`\n当引用视图时，根据视图的创建语句建立一张临时表\n然后查询视图的语句==从这张临时表查看数据\n###`UNDEFINED`\n未定义，系统选定\n##视图与表的关系\n视图是表的查询结果，所以表的数据改变会影响视图的结果\n###如果视图改变了呢？\n1. 视图的增删改也会影响表\n2. 但是视图并不总是能增删改：只有视图的数据与表的数据一一对应时才可以修改\n3. 对于`INSERT`还需要注意：视图必须包含表中没有默认值的列","source":"_posts/SQL学习-Part3-多表连接.md","raw":"title: \"3.SQL学习：多表连接\"\ndate: 2015-04-09 10:36:30\ntags: [SQL]\ncategories: SQL基础知识\ndescription: 主要学习了多表连接查询：`LEFT JOIN`、`RIGHT JOIN`、`INNER JOIN` 以及视图\n---\n#Pre：表\n一张表就是一个集合，一行数据是集合的一个元素\n\n* 理论上讲，不可能出现完全相同的两个行（所以union去重复了）\n* 但是，表中可以存在完全的两行（表内部的rowid是不可重复的，这个rowid看不见）\n* 集合相乘，就是笛卡尔积，两个集合的完全组合\n\n* * *\n\n#连接查询\n1. 两个表连接在一起\n2. 连接条件\n\n##语法\n###左连接(LEFT JOIN)\n以左表为准，去右表找匹配数据\n- 找不到用NULL补齐\n- 表A LEFT JOIN 表B = 表B RIGHT JOIN 表A\n\n```sql\nSELECT  列1， 列2， 列N FROM\ntableA LEFT JOIN tableB\nON tableA.列 = tableB.列 #此处表连接成为一张大表，完全当成普通表看\n#后面可加 WHERE, GROUP BY, HAVING, ORDER BY, LIMIT\n```\n###右连接(RIGHT JOIN)\n左连接：A站在B的左边，以A为准\n右连接：B站在A的右边，以A为准\n####如何记忆\n1. 可以把右连接转换为左连接\n2. 推荐把右连接转化为左连接（推荐使用左连接代替右连接）\n\n```sql\nSELECT  列1， 列2， 列N FROM\ntableA RIGHT JOIN tableB\nON tableA.列 = tableB.列 \n```\n###内连接(INNER JOIN)\n查询左右表都有的数据，即不要左/右中NULL的那一部分。\n内连接是左右连接的交集\n###外连接OUTER JOIN\n- 查出左右连接的并集\n- 可以用UNION达到目的（左连接UNION右连接）\n\n```sql\nSELECT  列1， 列2， 列N FROM\ntableA INNER JOIN tableB\nON tableA.列 = tableB.列\n```\n\n- - -\n\n##面试题\nMatch赛程表：\n\n| 字段名称 | 字段类型 |描述|\n|--------|--------|--|\n|    matchId    |  int      |主键|\n|hostTeamId|int|主队ID|\n|guestTeamId|int|客队ID|\n|matchResult|varchar(20)|比赛结果，如:(2:0)|\n|matchTime|date|比赛开始时间|\n\nTeam参赛队伍表：\n\n| 字段名称 |\t字段类型\t|\t描述\t|\n|--------|--------|--|\n|teamId|int|主键|\n|teamName|varchar(10)|队伍名称|\n\nMatch的hostTeamID与Team中的teamId关联\n查出2006-6-1到2007-7-1之间举行的所有比赛，并且用一下形式列出：\n\n|hostTeamId |matchResult|\tguestTeamId|matchTime|\n|---|---|---|---|\n|拜仁 |2:0|\t\t不莱梅|\t\t2006-06-21|\n\n###创建表\n```sql\n#创建表并插入数据\nCREATE TABLE m(\nmatchid int PRIMARY KEY AUTO_INCREMENT,\nhid int,\ngid int,\nresult varchar(20),\nmtime date\n);\n\nINSERT INTO m\n(hid, gid, result, mtime)\nVALUES\n(1,2,'2:0','2006-05-21'),\n(2,3,'1:2','2006-06-21'),\n(3,1,'2:5','2006-06-25'),\n(2,1,'4:2','2006-07-21');\n\nCREATE TABLE t(\ntid int,\ntname varchar(10)\n);\n\nINSERT INTO t\nVALUES\n(1, '国安'),\n(2, '申花'),\n(3, '全兴');\n```\n###解题步骤\n将问题分解为小问题\n####1：先弄对输出顺序\n```sql\nSELECT hid, result, gid, mtime FROM m;\n```\n####2：再取出主队名字\n做连接\n```sql\nSELECT hid, tname AS hname, result, gid,mtime \nFROM\nm LEFT JOIN t\nON m.hid = t.tid;\n```\n####3：再取出客队名字\n再一次左连接\n```sql\nSELECT hid, t1.tname AS hname, result, gid, t2.tname AS gname, mtime \nFROM\nm LEFT JOIN t AS t1\nON m.hid = t1.tid\n#左连接两次\nLEFT JOIN t AS t2\nON m.gid = t2.tid;\n```\n####4:限制时间\n```sql\nSELECT hid, t1.tname AS hname, result, gid, t2.tname AS gname, mtime \nFROM\nm LEFT JOIN t AS t1\nON m.hid = t1.tid\n\nLEFT JOIN t AS t2\nON m.gid = t2.tid\n\nWHERE mtime \nBETWEEN '2006-06-01' AND '2006-07-01';\n```\n####5:输出格式更改\n```sql\nSELECT t1.tname AS hname, result, t2.tname AS gname, mtime \nFROM\nm LEFT JOIN t AS t1\nON m.hid = t1.tid\n\nLEFT JOIN t AS t2\nON m.gid = t2.tid\n\nWHERE mtime \nBETWEEN '2006-06-01' AND '2006-07-01';\n```\n***\n#视图\n视图是由查询结果形成的一张虚拟表\n##语法\n###创建视图\n```sql\nCREATE VIEW 视图名\nAS SELECT 语句\n```\n###删除视图\n```sql\nDRIP VIEW 视图名\n```\n###修改视图\n```sql\nALTER VIEW 视图名 \nAS SELECT 语句\n```\n##视图的作用\n1. 简化查询\n2. 进行权限控制\n\t- 把表的权限封闭，但是开放相应的视图权限，视图只开放部分数据\n3. 大数据分表时用到\n\t- 表的行数超过200w，速度很慢==>把1张表的数据拆成4张表来存放\n\n##视图的algorithm\n```sql\nCREATE ALGORITHM = 规则 VIEW 视图名 ...\n```\n### `MERGE`\n当引用视图时，引用视图的语句与定义视图的语句合并\n- 当查询视图时，把查询视图的语句（`WHERE`那些）与创建视图的语句合并，分析形成一条新的`SELECT`语句\n\n### `TEMPTABLE`\n当引用视图时，根据视图的创建语句建立一张临时表\n然后查询视图的语句==从这张临时表查看数据\n###`UNDEFINED`\n未定义，系统选定\n##视图与表的关系\n视图是表的查询结果，所以表的数据改变会影响视图的结果\n###如果视图改变了呢？\n1. 视图的增删改也会影响表\n2. 但是视图并不总是能增删改：只有视图的数据与表的数据一一对应时才可以修改\n3. 对于`INSERT`还需要注意：视图必须包含表中没有默认值的列","slug":"SQL学习-Part3-多表连接","published":1,"updated":"2015-10-07T14:26:14.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3dm0013ggtu25dbbnmq"},{"title":"2.SQL学习：SQL基本操作","date":"2015-04-05T13:36:30.000Z","description":"SQL表的建立、数据的增删改查以及列的增删改，重点学习了查询关键字，包括了普通的WHERE, GROUP BY,  HAVING,ORDER BY, LIMIT，以及子查询","_content":"#对表的操作\n##建表\n###语法\n```sql\nCREATE TABLE 表名(\n列名称 列类型 [列属性] [默认值],#[]里的内容表示可选\n...\n);\n```\n###实例\n```sql\nCREATE TABLE class1(\nid INT PRIMARY KEY AUTO_INCREMENT,\nname CHAR(6) NOT NULL DEFAULT '',\nage TINYINT UNSIGNED NOT NULL DEFAULT 0,\nemail VARCHAR(30) NOT NULL DEFAULT '',\nsalary DECIMAL(5,2) NOT NULL DEFAULT 0.00,\nenroll DATE NOT NULL DEFAULT '2000-03-01'\n)CHARSET UTF8;\n```\n##列管理\n###增加列\n####语法\n```sql\nALTER TABLE 表名\nADD 列名 列属性\n#AFTER 列名1 #将新增列放在列1的后面\n#FIRST #将新增列放在最前面\n```\n###修改列\n####语法\n```sql\nALTER TABLE 表名\nCHANGE 被改变的列声明 现在的列声明（列声明：列名+列属性）\n```\n###删除列\n####语法\n```sql\nALTER TABLE 表名\nDROP 列名\n```\n##行操作\n###增加行\n三要素：\n- 往哪张表添加？\n- 给哪几列添加？\n- 分别添加什么值？\n####语法\n```sql\nINSERT INTO 表名\n(列1, 列2, ..., 列N)\nVALUES\n(值1，值2,, ..., 值N)\n```\n如果不写列，默认插入所有列(所以要写所有列的值)\n###修改行的值\n改哪张表？需要改哪几列的值？分别改什么值？在哪些行生效？\n```sql\nUPDATE 表名\nSET\n列1 = 值1，\n列2 = 值2，\n...\n列N = 值N\n# WHERE 表达式 #不写这个默认所有行\n```\n###删除行\n只能删除整行，而不是一行中某几列的值\n```sql\nDELETE 表名\nWHERE 表达式\n```\n***\n#查询\n`SELECT`有5个字句（如果写了多种，关键字的顺序必须固定如下：`WHERE` ==> `GROUP BY`==>`HAVING`==>`ORDER BY`==>`LIMIT`）\nTIPS：\n可以用括号`()`提高关键字的优先级\n## `WHERE`\n判断每一行的表达式是否成立\n###比较运算符\n####普通的符号\n```sql\n<,<=\n=,!=\n>, >=\n```\n####`IN`在某个集合内\n```sql\nIN (值1, 值2, ..., 值N) #表示取出值=值，值=值2,...值=值N得所有行\n```\n####`BETWEEN`在某个范围内\n```sql\nBETWEEN 值1 AND 值2 #表示取出满足条件：值1 <= 值 <= 值2的所有行\n```\n###逻辑运算符\n- `NOT`:不属于某个条件的行\n- 'OR'\n- 'AND'\n###模糊查询\n####`LIKE`\n- `%`：通配任意长度的字符\n- `_`：通配单个字符\n##`GROUP BY`\n把行按**字段**分组\n###语法\n```sql\nGROUP BY 列, 列2, ..., 列N\n```\n###运用场合\n常见于统计场合：统计平均成绩、最高分等\n####统计函数\n- `MAX`\n```sql\n SELECT goods_id, max(shop_price) FROM test\n #这样写是没有意义的，这样goods_id是第一个遇见的id，而不是最大价格的goods_id\n```\n- `MIN`\n- `SUM`\n- `AVG`\n- `COUNT`\n\n将列名当做变量名来看待，同时，可以给计算结果利用`AS`取别名\n##`HAVING`\n- `WHERE`是对表起作用，不能对查询结果（虽然结构和表一致）起作用\n- `HAVING`是继续对查询结果继续查询\n##`ORDER BY`\n默认是根据字段升序排序（`ASC`显式声明）\n- 最后加`DESC`改为降序排列\n###根据多个字段进行排序\n```sql\nORDER BY 列1， 列2 ...\n```\n##`LIMIT`\n放在语句最后，起到限制条目的作用\n```sql\nLIMIT [OFFSET], [N]\n```\n- `OFFSET`:偏移量（结果不包含该值）\n- `N`：取出的条目个数\n`OFFSET`不写，相当于从第1行开始取知道取出N个数据为止\n# 子查询\n逻辑上构建一张\"临时表\"(这张表不存在)==>将查询结果当做这张\"临时表\"==>在这张临时表上进行子查询\n##WHERE型子查询 \n 把内层查询的结果当做外层查询的**比较条件**\n###查询每个栏目下最贵商品\n```sql\nSELECT goods_name, cat_id,shop_price FROM test \nWHERE shop_price IN \n(SELECT MAX(shop_price) FROM test GROUP BY cat_id);\n```\n##FROM型子查询\n把内层查询结果当做**临时表**，供外层再次查询\n##EXISTS子查询\n把外层查询结果拿到内层，看内层查询是否成立\n#良好的理解模型\n- `WHERE`表达式：把表达式放在行中，看表达式是否为真\n- 列：理解成变量，可以晕死\n- 取出结果：可以理解成一张临时表\n***\n#练习题\n有如下的表以及数据:\n|name|subject|score|\n|---|---|---|\n|张三|数学|90|\n|张三|语文|50|\n|张三|地理|40|\n|李四|语文|55|\n|李四|政治|45|\n|王五|政治|30|\n要求：查出2门及两门以上不及格者的平均成绩\n##只利用`WHERE-HAVING-GROUP`\n将大问题分解为小问题一步步来：\n###1.查出每个人的平均分\n```sql\nSELECT name, avg(score)\nFROM tableScoreGROUP BY name;\n```\n###2.计算每个人挂科总数目\n```sql\nSELECT name, sum(score<60)\nFROM tableScore GROUP BY name;\n```\n###3.在2的基础上找出每个人的平均分\n```sql\nSELECT name, sum(score<60), avg(score)\nFROM tableScore GROUP BY name;\n```\n###4.在3的基础上找出挂科数目>=2的人\n```sql\nSELECT name, sum(score<60) as he, avg(score)\nFROM tableScore GROUP BY name \nHAVING he >=2;\n```\n##利用子查询\n```sql\nSELECT name, avg(score) FROM tableScore\nWHERE name IN\n(SELECT name FROM\n(SELECT name, sum(score<60) as co FROM tableScore \nGROUP BY name HAVING co>=2) \nAS tmp) \nGROUP BY name;\n```\n##前期准备\n###建表\n```sql\nCREATE TABLE tableScore(\nname VARCHAR(4),\nsubject VARCHAR(4),\nscore TINYINT\n);\n```\n###插入数据\n```sql\nINSERT INTO tableScore\n(name, subject, score)\nVALUES\n('张三','数学',90),\n('张三','语文',50),\n('张三','地理',40),\n('李四','语文',55),\n('李四','政治',45),\n('王二','政治',30);\n\n#增加额外的数据\nINSERT INTO tableScore\n(name, subject, score)\nVALUES\n('赵六','A',100),\n('赵六','A',80),\n('赵六','A',55);\n```","source":"_posts/SQL学习-Part2-SQL基本操作.md","raw":"title: \"2.SQL学习：SQL基本操作\"\ndate: 2015-04-05 21:36:30\ntags: [SQL基本知识]\ncategories: SQL\ndescription: SQL表的建立、数据的增删改查以及列的增删改，重点学习了查询关键字，包括了普通的WHERE, GROUP BY,  HAVING,ORDER BY, LIMIT，以及子查询\n---\n#对表的操作\n##建表\n###语法\n```sql\nCREATE TABLE 表名(\n列名称 列类型 [列属性] [默认值],#[]里的内容表示可选\n...\n);\n```\n###实例\n```sql\nCREATE TABLE class1(\nid INT PRIMARY KEY AUTO_INCREMENT,\nname CHAR(6) NOT NULL DEFAULT '',\nage TINYINT UNSIGNED NOT NULL DEFAULT 0,\nemail VARCHAR(30) NOT NULL DEFAULT '',\nsalary DECIMAL(5,2) NOT NULL DEFAULT 0.00,\nenroll DATE NOT NULL DEFAULT '2000-03-01'\n)CHARSET UTF8;\n```\n##列管理\n###增加列\n####语法\n```sql\nALTER TABLE 表名\nADD 列名 列属性\n#AFTER 列名1 #将新增列放在列1的后面\n#FIRST #将新增列放在最前面\n```\n###修改列\n####语法\n```sql\nALTER TABLE 表名\nCHANGE 被改变的列声明 现在的列声明（列声明：列名+列属性）\n```\n###删除列\n####语法\n```sql\nALTER TABLE 表名\nDROP 列名\n```\n##行操作\n###增加行\n三要素：\n- 往哪张表添加？\n- 给哪几列添加？\n- 分别添加什么值？\n####语法\n```sql\nINSERT INTO 表名\n(列1, 列2, ..., 列N)\nVALUES\n(值1，值2,, ..., 值N)\n```\n如果不写列，默认插入所有列(所以要写所有列的值)\n###修改行的值\n改哪张表？需要改哪几列的值？分别改什么值？在哪些行生效？\n```sql\nUPDATE 表名\nSET\n列1 = 值1，\n列2 = 值2，\n...\n列N = 值N\n# WHERE 表达式 #不写这个默认所有行\n```\n###删除行\n只能删除整行，而不是一行中某几列的值\n```sql\nDELETE 表名\nWHERE 表达式\n```\n***\n#查询\n`SELECT`有5个字句（如果写了多种，关键字的顺序必须固定如下：`WHERE` ==> `GROUP BY`==>`HAVING`==>`ORDER BY`==>`LIMIT`）\nTIPS：\n可以用括号`()`提高关键字的优先级\n## `WHERE`\n判断每一行的表达式是否成立\n###比较运算符\n####普通的符号\n```sql\n<,<=\n=,!=\n>, >=\n```\n####`IN`在某个集合内\n```sql\nIN (值1, 值2, ..., 值N) #表示取出值=值，值=值2,...值=值N得所有行\n```\n####`BETWEEN`在某个范围内\n```sql\nBETWEEN 值1 AND 值2 #表示取出满足条件：值1 <= 值 <= 值2的所有行\n```\n###逻辑运算符\n- `NOT`:不属于某个条件的行\n- 'OR'\n- 'AND'\n###模糊查询\n####`LIKE`\n- `%`：通配任意长度的字符\n- `_`：通配单个字符\n##`GROUP BY`\n把行按**字段**分组\n###语法\n```sql\nGROUP BY 列, 列2, ..., 列N\n```\n###运用场合\n常见于统计场合：统计平均成绩、最高分等\n####统计函数\n- `MAX`\n```sql\n SELECT goods_id, max(shop_price) FROM test\n #这样写是没有意义的，这样goods_id是第一个遇见的id，而不是最大价格的goods_id\n```\n- `MIN`\n- `SUM`\n- `AVG`\n- `COUNT`\n\n将列名当做变量名来看待，同时，可以给计算结果利用`AS`取别名\n##`HAVING`\n- `WHERE`是对表起作用，不能对查询结果（虽然结构和表一致）起作用\n- `HAVING`是继续对查询结果继续查询\n##`ORDER BY`\n默认是根据字段升序排序（`ASC`显式声明）\n- 最后加`DESC`改为降序排列\n###根据多个字段进行排序\n```sql\nORDER BY 列1， 列2 ...\n```\n##`LIMIT`\n放在语句最后，起到限制条目的作用\n```sql\nLIMIT [OFFSET], [N]\n```\n- `OFFSET`:偏移量（结果不包含该值）\n- `N`：取出的条目个数\n`OFFSET`不写，相当于从第1行开始取知道取出N个数据为止\n# 子查询\n逻辑上构建一张\"临时表\"(这张表不存在)==>将查询结果当做这张\"临时表\"==>在这张临时表上进行子查询\n##WHERE型子查询 \n 把内层查询的结果当做外层查询的**比较条件**\n###查询每个栏目下最贵商品\n```sql\nSELECT goods_name, cat_id,shop_price FROM test \nWHERE shop_price IN \n(SELECT MAX(shop_price) FROM test GROUP BY cat_id);\n```\n##FROM型子查询\n把内层查询结果当做**临时表**，供外层再次查询\n##EXISTS子查询\n把外层查询结果拿到内层，看内层查询是否成立\n#良好的理解模型\n- `WHERE`表达式：把表达式放在行中，看表达式是否为真\n- 列：理解成变量，可以晕死\n- 取出结果：可以理解成一张临时表\n***\n#练习题\n有如下的表以及数据:\n|name|subject|score|\n|---|---|---|\n|张三|数学|90|\n|张三|语文|50|\n|张三|地理|40|\n|李四|语文|55|\n|李四|政治|45|\n|王五|政治|30|\n要求：查出2门及两门以上不及格者的平均成绩\n##只利用`WHERE-HAVING-GROUP`\n将大问题分解为小问题一步步来：\n###1.查出每个人的平均分\n```sql\nSELECT name, avg(score)\nFROM tableScoreGROUP BY name;\n```\n###2.计算每个人挂科总数目\n```sql\nSELECT name, sum(score<60)\nFROM tableScore GROUP BY name;\n```\n###3.在2的基础上找出每个人的平均分\n```sql\nSELECT name, sum(score<60), avg(score)\nFROM tableScore GROUP BY name;\n```\n###4.在3的基础上找出挂科数目>=2的人\n```sql\nSELECT name, sum(score<60) as he, avg(score)\nFROM tableScore GROUP BY name \nHAVING he >=2;\n```\n##利用子查询\n```sql\nSELECT name, avg(score) FROM tableScore\nWHERE name IN\n(SELECT name FROM\n(SELECT name, sum(score<60) as co FROM tableScore \nGROUP BY name HAVING co>=2) \nAS tmp) \nGROUP BY name;\n```\n##前期准备\n###建表\n```sql\nCREATE TABLE tableScore(\nname VARCHAR(4),\nsubject VARCHAR(4),\nscore TINYINT\n);\n```\n###插入数据\n```sql\nINSERT INTO tableScore\n(name, subject, score)\nVALUES\n('张三','数学',90),\n('张三','语文',50),\n('张三','地理',40),\n('李四','语文',55),\n('李四','政治',45),\n('王二','政治',30);\n\n#增加额外的数据\nINSERT INTO tableScore\n(name, subject, score)\nVALUES\n('赵六','A',100),\n('赵六','A',80),\n('赵六','A',55);\n```","slug":"SQL学习-Part2-SQL基本操作","published":1,"updated":"2015-10-07T14:27:18.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3dr0018ggtu1gmaz2uc"},{"title":"1.SQL学习：SQL列类型","date":"2015-04-03T02:36:30.000Z","description":"主要学习了SQL表的数值类型以及时间戳的表达、运算","_content":"\n# 列\n不同列类型占用的空间不同\n- 选列的原则：够用、不浪费\n- 一般不采用枚举：\n\t- 违背了关心数据库的设计原则\n\t- 列应该代表无法再分割的一项\n\n## 列类型\n###数值型\n#### 整型\n|类型|字节|位|无符号|有符号\n|---|---|---|---|---|\n|`TINYINT`|1|8|$[0, 2^8-1]$|$[-2^7,2^7-1]$|\n|`SMALLINT`|2|16|$[0,2^{16}-1]$|$[-2^{15}, 2^{15}-1]$|\n|`MEDIUMINT`|3|24|$[0,2^{24}-1]$|$[-2^{23}, 2^{23}-1]$|\n|`INT`|4|32|$[0,2^{32}-1]$|$[-2^{31}, 2^{31}-1]$|\n|`BIGINT`|8|64|$[0,2^{64}-1]$|$[-2^{63}, 2^{63}-1]$|\n#####可选属性\n|符号|意义|其他|\n|---|---|---|\n|`M`|宽度|**仅**在ZEROFILL时才有意义|\n|`UNSIGNED`|无符号类型|\n|`ZEFOFILL`|0填充|默认为UNSIGNED|\n|`DEFAULT`|列的默认值|默认为NULL，只能用固定语法对NULL进行比较：NULL IS NULL；所以推荐声明为：NOT NULL DEFAULT 0|\n####小数型\n#####浮点型\n######语法\n```sql\nFLOAT (M, D)\n```\n其中：\n- M： 精度，表示总的位数（整数位+小数位）\n- D：标度，小数位\n######实例\n```sql\nFLOAT(6,2) #表示范围：-9999.99 ~ 9999.99\n```\n######四舍五入规则\n- 5前面是1379则“舍”\n- 5前面是2468则“进”\n#####定点型\n######语法\n```sql\nDECIMAL (M, D)\n```\n#####与FLOAT比较\n- 精度更高，实用于货币\n- ![与`FLOAT`对比](http://askingwindy-gitcafe.qiniudn.com/decimal与float对比.png)\n###字符型\n|类型|说明|典型声明方式|范围|\n|---|---|---|---|\n|`CHAR`|定长字符串（不够空格补齐）|`gender CHAR(1)`|$CHAR(M),0<=M<=255字符$|\n|`VARCHAR`|变长字符串|`email VARCHAR(20)`|$VARCHAR(M), 0<=M<=65535$,\t注释：如果值的长度大于255，将被转化为TEXT类型|\n|`TEXT`|文本串|`content TEXT`|约2w~6w个字符，受字符集影响|\n####`CHAR`与`VARCHAR`\n##### 性能比较\n- 在字符长度一定时，`CHAR`性能比`VARCHAR`好\n- 长度不确定时，`CHAR`类型的字段在使用时性能略差\n#####区别\n1. M值得范围不同\n2. 空间利用率不同\n3. 末尾空格存储方式不同\n4. 速度上，`CHAR`更快\n###日期/时间类型\n#### `YEAR`年类型\n- 1个字节\n- 范围为:$[1901,2155]$年，$0000$表示错误的时间\n- 一般输入为4位数字，如果输入为2位数字：\n\t- $[00,69]$年表示$[2000,2069]$年\n\t- 否则表示$[1970,1999]$年\n![year输入与显式](http://askingwindy-gitcafe.qiniudn.com/year.png)\n####`DATE`日期类型\n- 范围为:$[1000-01-01,9999-12-31]$\n- 典型格式为：1992-08-12\n- ![DATE的输入与显式](http://askingwindy-gitcafe.qiniudn.com/date.png)\n####`TIME`时间类型\n- 范围不止24小时，因为可以表示两个时间只差：$[-838:59:59, 838:59:59]$\n- 典型格式为：hh:mm:ss\n###`DATETIME`日期时间类型\n - 典型格式为：1989-05-06 14:32:08\n - 开发中，很少用`DATETIME`表示一个需要精确到秒的列，往往用**时间戳**表示\n###时间戳\n- 计算从1970-01-01 00:00:00到当前的秒数\n- 方便计算：用`INT`存储时间戳\n- 对于显式：通过函数进行格式化\n#### `UNIX_TIMESTAMP()`获得时间戳\n```sql\n#返回现在的时间戳，例如：1428843853\nSELECT UNIX_TIMESTAMP();\n```\n将`DATE`或者`DATETIME`转化为时间戳\n```sql\nSELECT UNIX_TIMESTAMP('1991-11-05');#DATE转化为时间戳\nSELECT UNIX_TIMESTAMP('1991-11-05 0:0:0');#DATETIME转化为时间戳\n```\n####`FROM_UNIXTIME(UNIX_TIMESTAMP, FORMAT)`将时间戳转化为时间\n```sql\nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP());#显式现在时间，默认格式为:'2015-04-08 21:32:30'\n```\n其中，FORMAT可以包含与`DATE_FORMAT()`函数输入项列表相同的说明符\n#### 关于时间的计算\n##### `DATEDIFF(exp1, exp2)`\n返回开始时间exp1与结束时间exp2之间的天数，exp1/exp2可能是DATE或者DATETIME，计算时值用到日期部分\n```sql\nSELECT DATEDIFF(’1997-12-31 23:59:59′,’1997-12-30′);#返回1\nSELECT DATEDIFF(’1997-11-30 23:59:59′,’1997-12-31′);#返回-31\n```\n#####`ADDDATE(exp, days)`\n```sql\nSELECT ADDDATE(,1998-01-02',31);#输出为1998-02-02\n```\n同理，用函数`ADDTIME(exp1, exp2)`可以使用\n","source":"_posts/SQL学习-Part1-SQL列类型.md","raw":"title: \"1.SQL学习：SQL列类型\"\ndate: 2015-04-03 10:36:30\ntags: [SQL]\ncategories: SQL基本知识\ndescription: 主要学习了SQL表的数值类型以及时间戳的表达、运算\n---\n\n# 列\n不同列类型占用的空间不同\n- 选列的原则：够用、不浪费\n- 一般不采用枚举：\n\t- 违背了关心数据库的设计原则\n\t- 列应该代表无法再分割的一项\n\n## 列类型\n###数值型\n#### 整型\n|类型|字节|位|无符号|有符号\n|---|---|---|---|---|\n|`TINYINT`|1|8|$[0, 2^8-1]$|$[-2^7,2^7-1]$|\n|`SMALLINT`|2|16|$[0,2^{16}-1]$|$[-2^{15}, 2^{15}-1]$|\n|`MEDIUMINT`|3|24|$[0,2^{24}-1]$|$[-2^{23}, 2^{23}-1]$|\n|`INT`|4|32|$[0,2^{32}-1]$|$[-2^{31}, 2^{31}-1]$|\n|`BIGINT`|8|64|$[0,2^{64}-1]$|$[-2^{63}, 2^{63}-1]$|\n#####可选属性\n|符号|意义|其他|\n|---|---|---|\n|`M`|宽度|**仅**在ZEROFILL时才有意义|\n|`UNSIGNED`|无符号类型|\n|`ZEFOFILL`|0填充|默认为UNSIGNED|\n|`DEFAULT`|列的默认值|默认为NULL，只能用固定语法对NULL进行比较：NULL IS NULL；所以推荐声明为：NOT NULL DEFAULT 0|\n####小数型\n#####浮点型\n######语法\n```sql\nFLOAT (M, D)\n```\n其中：\n- M： 精度，表示总的位数（整数位+小数位）\n- D：标度，小数位\n######实例\n```sql\nFLOAT(6,2) #表示范围：-9999.99 ~ 9999.99\n```\n######四舍五入规则\n- 5前面是1379则“舍”\n- 5前面是2468则“进”\n#####定点型\n######语法\n```sql\nDECIMAL (M, D)\n```\n#####与FLOAT比较\n- 精度更高，实用于货币\n- ![与`FLOAT`对比](http://askingwindy-gitcafe.qiniudn.com/decimal与float对比.png)\n###字符型\n|类型|说明|典型声明方式|范围|\n|---|---|---|---|\n|`CHAR`|定长字符串（不够空格补齐）|`gender CHAR(1)`|$CHAR(M),0<=M<=255字符$|\n|`VARCHAR`|变长字符串|`email VARCHAR(20)`|$VARCHAR(M), 0<=M<=65535$,\t注释：如果值的长度大于255，将被转化为TEXT类型|\n|`TEXT`|文本串|`content TEXT`|约2w~6w个字符，受字符集影响|\n####`CHAR`与`VARCHAR`\n##### 性能比较\n- 在字符长度一定时，`CHAR`性能比`VARCHAR`好\n- 长度不确定时，`CHAR`类型的字段在使用时性能略差\n#####区别\n1. M值得范围不同\n2. 空间利用率不同\n3. 末尾空格存储方式不同\n4. 速度上，`CHAR`更快\n###日期/时间类型\n#### `YEAR`年类型\n- 1个字节\n- 范围为:$[1901,2155]$年，$0000$表示错误的时间\n- 一般输入为4位数字，如果输入为2位数字：\n\t- $[00,69]$年表示$[2000,2069]$年\n\t- 否则表示$[1970,1999]$年\n![year输入与显式](http://askingwindy-gitcafe.qiniudn.com/year.png)\n####`DATE`日期类型\n- 范围为:$[1000-01-01,9999-12-31]$\n- 典型格式为：1992-08-12\n- ![DATE的输入与显式](http://askingwindy-gitcafe.qiniudn.com/date.png)\n####`TIME`时间类型\n- 范围不止24小时，因为可以表示两个时间只差：$[-838:59:59, 838:59:59]$\n- 典型格式为：hh:mm:ss\n###`DATETIME`日期时间类型\n - 典型格式为：1989-05-06 14:32:08\n - 开发中，很少用`DATETIME`表示一个需要精确到秒的列，往往用**时间戳**表示\n###时间戳\n- 计算从1970-01-01 00:00:00到当前的秒数\n- 方便计算：用`INT`存储时间戳\n- 对于显式：通过函数进行格式化\n#### `UNIX_TIMESTAMP()`获得时间戳\n```sql\n#返回现在的时间戳，例如：1428843853\nSELECT UNIX_TIMESTAMP();\n```\n将`DATE`或者`DATETIME`转化为时间戳\n```sql\nSELECT UNIX_TIMESTAMP('1991-11-05');#DATE转化为时间戳\nSELECT UNIX_TIMESTAMP('1991-11-05 0:0:0');#DATETIME转化为时间戳\n```\n####`FROM_UNIXTIME(UNIX_TIMESTAMP, FORMAT)`将时间戳转化为时间\n```sql\nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP());#显式现在时间，默认格式为:'2015-04-08 21:32:30'\n```\n其中，FORMAT可以包含与`DATE_FORMAT()`函数输入项列表相同的说明符\n#### 关于时间的计算\n##### `DATEDIFF(exp1, exp2)`\n返回开始时间exp1与结束时间exp2之间的天数，exp1/exp2可能是DATE或者DATETIME，计算时值用到日期部分\n```sql\nSELECT DATEDIFF(’1997-12-31 23:59:59′,’1997-12-30′);#返回1\nSELECT DATEDIFF(’1997-11-30 23:59:59′,’1997-12-31′);#返回-31\n```\n#####`ADDDATE(exp, days)`\n```sql\nSELECT ADDDATE(,1998-01-02',31);#输出为1998-02-02\n```\n同理，用函数`ADDTIME(exp1, exp2)`可以使用\n","slug":"SQL学习-Part1-SQL列类型","published":1,"updated":"2015-10-07T14:27:04.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3dv001bggtuuhoj2h0b"},{"title":"学习JDBC:JDBC","date":"2015-04-29T08:36:30.000Z","description":"主要介绍了什么是JDBC，以及在JAVA里面如何关联数据库","_content":"#JDBC简介\n应用程序、JDBC API、数据库驱动和数据库之间的关系![JDBC简介](http://askingwindy-gitcafe.qiniudn.com/JDBC简介.png)\n\ndriver实现了JDBC的接口，是由数据库开发\n##连接数据的步骤\n```java\n/*\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport com.mysql.jdbc.Driver;\n*/\n\n/**\n * 不太规范的示范\n * @throws ClassNotFoundException\n * @throws SQLException\n */\npublic static void test() throws ClassNotFoundException, SQLException{\n\t//1.注册驱动\n\tDriverManager.registerDriver(new Driver());//或者写：com.mysql.jdbc.Drive()\n\t//2.建立连接\n\tConnection conn = DriverManager.getConnection(\n\t\t\t\"jdbc:mysql://localhost:3306/jdbc\", \"root\", \"123456\");\n\t//3.创建语句\n\tStatement st = conn.createStatement();\n\t\n\t//4.执行语句\n\tResultSet rs = st.executeQuery(\"select * from user\");\n\t\n\t//5.处理结果\n\twhile(rs.next()){//按行遍历\n\t\t//1是第一列\n\t\tSystem.out.println(rs.getObject(1) + \"\\t\" + rs.getObject(2) +\"\\t\" \n\t\t\t\t+rs.getObject(3) + \"\\t\" + rs.getObject(4));\n\t}\n\t\n\t//6.释放资源：关闭的顺序与创建顺序相反\n\trs.close();\n\tst.close();\n\tconn.close();\n}\n```\n### 1. 注册驱动(只做一次)\n同一个程序可以注册很多驱动\n####第1种方法\n若果jar包不存在，编译无法通过\n第一种方式在类加载时会执行静态的类加载（类似第三种注册方式，表明已注册一次），但是由于语句声明又会被注册一次，所以第一种方式加载了两次。产生了垃圾注册\n```java\nDriverManager.registerDriver(new Driver());//或者写：com.mysql.jdbc.Drive()\n```\n####第2种方法\n```java\n//第2种方法\nSystem.setProperty(\"jdbc.drivers\", \"com.mysql.jdbc.Drive()\");//setProperty(key, value)\n```\n在`value`部分，利用冒号来区分多个驱动；例如：\"com.mysql..:com.sqlserver\"\n####第3种方法\n推荐方式\n```java\nClass.forName(\"com.mysql.jdbc.Driver\");//根据类的名字，将类加载到jvm\n```\n### 2. 建立连接\n```java\nString  url= \"jdbc:mysql://localhost:3306/jdbc\";\nString root = \"root\";\nString password = \"123456\";\nConnection conn = DriverManager.getConnection(\n\t\turl, root, password);\n```\n####url格式\n```java\n\"jdbc:子协议:子名称(mysql里面没有子名称)//主机名:端口号(如果缺省，可以省略主机名与端口号)/数据库名\n```\n### 3. 创建、执行语句\n```java\n//3.创建语句\nStatement st = conn.createStatement();\n//4.执行语句\nResultSet rs = st.executeQuery(\"select * from user\");\n```\n###4.处理结果\n`rs.next()`是按行遍历，从下标为1的第1列开始\n```java\nwhile(rs.next()){//按行遍历\n\t//1是第一列\n\tSystem.out.println(rs.getObject(1) + \"\\t\" + rs.getObject(2) +\"\\t\" \n\t\t\t+rs.getObject(3) + \"\\t\" + rs.getObject(4));\n}\n```\n###5.释放资源\n后创建的要先关闭\n- 数据库建立连接能力有限\n\n```java\nrs.close();\nst.close();\nconn.close();\n```\nconnection是尽量晚建立，早释放==>减少占用TCP/IP时间\n##规范的示例，可当做模板使用\n```java\n#jdbc.java\npublic static void template() throws ClassNotFoundException, SQLException{\n\tConnection conn = null;\n\tStatement st = null;\n\tResultSet rs = null;\n\ttry {\n\t\t\t\n\t\tconn = JdbcUtils.getConnection();\n\t\t\n\t\tst = conn.createStatement();\n\t\t\n\t\trs = st.executeQuery(\"select * from user\");\n\n\t\twhile(rs.next()){//按行遍历\n\t\t\t//1是第一列\n\t\t\tSystem.out.println(rs.getObject(1) + \"\\t\" + rs.getObject(2) +\"\\t\" \n\t\t\t\t\t+rs.getObject(3) + \"\\t\" + rs.getObject(4));\n\t\t}\n\t}finally{\n\t\tJdbcUtils.free(rs, st, conn);\n\t}\t\n}\n```\n其中，JdbcUtils是自定义的工具类，代码如下：\n```java\npackage jdbc;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * 工具类\n * @author RY\n *\n */\npublic final class JdbcUtils {\n\tprivate static String  url= \"jdbc:mysql://localhost:3306/jdbc\";\n\tprivate static String root = \"root\";\n\tprivate static String password = \"123456\";\n\t\n\tprivate JdbcUtils(){}\n\t//注册驱动\n\tstatic{\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new ExceptionInInitializerError(e);\n\t\t}\n\t}\n\t\n\t/**\n\t * 创建连接\n\t * @return\n\t * @throws SQLException\n\t */\n\tpublic static Connection getConnection() throws SQLException{\n\t\treturn  DriverManager.getConnection(url, root, password);\n\t}\n\t\n\t/**\n\t * 释放资源\n\t * @param rs\n\t * @param st\n\t * @param conn\n\t */\n\tpublic static void free(ResultSet rs, Statement st, Connection conn){\n\t\tif(rs!=null){\n\t\t\ttry {\n\t\t\t\trs.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}finally{\n\t\t\t\tif(st!=null){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tst.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}finally{\n\t\t\t\t\t\tif(conn!=null){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconn.close();\n\t\t\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t}\t\n}\n```\n***\n#对行的操作：CRUD\nC：create\nR:  read\nU: Update\nD: Delete\n\n使用**PreparedStatement**来替换Statement!!!\n\n##C(create)\n插入语句（`insert into ... values...`），利用：`st.executeUpdate(sql)`，其返回值是个int型的值，表示受到改变的行数\n利用PreparedStatement：\n```java\npublic static void create(String name, java.util.Date birthday, float money) throws SQLException{\n\tConnection conn = null;\n\tPreparedStatement ps = null;\n\tResultSet rs = null;\n\ttry{\n\t\tconn = JdbcUtils.getConnection();\n\t\t\n\t\tString sql = \"INSERT INTO user (name, birthday, money) VALUES (?, ?, ?)\";\n\t\tps = conn.prepareStatement(sql);\n\t\tps.setString(1, name);\n\t\tps.setDate(2, new java.sql.Date(birthday.getTime()));\n\t\tps.setFloat(3, money);\n\t\tint i = ps.executeUpdate();\n\t\tSystem.out.println(\"i = \"+i);\n\t}finally{\n\t\tJdbcUtils.free(rs, ps, conn);\n\t}\n}\n```\n###Date的转换\n形参中的Date是java.util.*中的类，而sql接收的Date事java.sql.*中的类（是java.util的子类）\n所以需要进行一个类的转换`new java.sql.Date(birthday.getTime()`\n##R(read)\n读取语句（`select ... from ... where...`），利用：`st.executeQuery(sql)`，其返回值是个ResultSet，可以逐行扫描读取结果\n```java\npublic static void read() throws SQLException{\n\tConnection conn = null;\n\tStatement st = null;\n\tResultSet rs = null;\n\ttry {\t\t\t\t\n\t\tconn = JdbcUtils.getConnection();\t\t\n\t\tst = conn.createStatement();\t\n\t\t//直接写*的缺点：导致不知道列名，以及取出数据量太大\n\t\trs = st.executeQuery(\"select id, name, birthday, money from user\");\n\t\t\n\t\twhile(rs.next()){//按行遍历\n\t\t\t//根据列名来获取数据\n\t\t\tSystem.out.println(rs.getObject(\"id\") + \"\\t\" \n\t\t\t\t\t+ rs.getObject(\"name\") +\"\\t\" \n\t\t\t\t\t+rs.getObject(\"birthday\") + \"\\t\" \n\t\t\t\t\t+ rs.getObject(\"money\"));\n\t\t}\n\t}finally{\n\t\tJdbcUtils.free(rs, st, conn);\n\t}\t\n}\n```\n##U(update)\n```java\npublic static void update() throws SQLException{\n\tConnection conn = null;\n\tStatement st = null;\n\tResultSet rs = null;\n\ttry {\t\t\t\t\n\t\tconn = JdbcUtils.getConnection();\t\t\n\t\tst = conn.createStatement();\t\n\t\t\n\t\tString sql = \"UPDATE user SET money =  money + 10\";\n\t\tint i = st.executeUpdate(sql);\n\t\tSystem.out.println(\"i = \"+i);\n\n\t}finally{\n\t\tJdbcUtils.free(rs, st, conn);\n\t}\t\n}\n```\n##D(delete)\n```sql\npublic static void delete() throws SQLException{\n\tConnection conn = null;\n\tStatement st = null;\n\tResultSet rs = null;\n\ttry {\t\t\t\t\n\t\tconn = JdbcUtils.getConnection();\t\t\n\t\tst = conn.createStatement();\t\n\t\t\n\t\tString sql = \"DELEGE FROM user WHERE money < 1000\";\n\t\tint i = st.executeUpdate(sql);\n\t\tSystem.out.println(\"i = \"+i);\n\n\t}finally{\n\t\tJdbcUtils.free(rs, st, conn);\n\t}\t\n}\n```\n##注意\n###不能将`conn`关闭，然后返回`rs`给上层\n一旦`conn`关闭，`conn`后的都会无效，包括`st`与`rs`\n- 但是必须全部关闭，后续会有**连接池**的概念\n***\n#其他\n##SQL注入\n```java\npublic static void read(String s){\n...\nrs = st.executeQuery(\"SELECT id, name, birthday, money FROM user WHERE name = '\" + s + \"'\")；\n}\n```\n期望：传入s=某个名字时，得到这个名字对应的一行的数据\n但是，当`s = ' or 1 or ' `时，会输出所有数据，这是因为此时sql识别的语句是：\n```sql\nSELECT id, name, birthday, money \nFROM user\nWHERE name = '' or 1 or ''#由于是or语法+1(恒为真)\n```\n###修复SQL注入：PreparedStatement\nPreparedStatement是Statement的子类\n- 将`Statement`改为`PreparedStatement`类，对sql语句进行预处理来避免SQL注入\n- sql的语句里，不再利用拼接，而是利用`?`占位符\n```sql\nPreparedStatement ps = null;\nString sql = \"SELECT id, name, money, birthday FROM user WHERE name = ?\";\nps = conn.preparedStatement(sql);\nps.setString(1, name);//表明第一个问号是name\nrs = ps.executeQuery();\n```\n##大文本存储\n数据库：clob_test\n|field|type|\n|--|--|\n|id|int|\n|big_text|text|\n###如何从file中读取文件字符流\n利用Reader与Writer来读取文件的字符流\n利用装饰器：BufferedXXX\n###往数据库写入大文本\n从本地读取一个文件，写入数据库中\n```java\nString sql = \"insert into clob_test(big_test) values (?) \";\nps = conn.prepareStatement(sql);\nFile file = new File(\"src/jdbc/JdbcUtils.java\");\nReader reader = new BufferedReader(new FileReader(file));\nps.setCharacterStream(1, reader,(int)file.length());\nint i = ps.executeUpdate();\nreader.close();\n```\n###从数据库读取大文本\n利用`Clob`类\n```java\nwhile(rs.next()){\n\tClob clob = rs.getClob(1);\n\tReader reader = clob.getCharacterStream();\n\tFile file = new File(\"JdbcUtils_bak.java\");\n\tWriter writer = new BufferedWriter(new FileWriter(file));\n\tchar[]buff = new char[1024];\n\tfor(int i=0;(i=reader.read(buff))>1; ){\n\t\twriter.write(buff, 0, i);\n\t}\n\twriter.close();\n\treader.close();\n}\n```\n##大字节数组\n###如何从file中读取文件字节流\n利用InputStream与OutputStream来读取文件的字符流\n利用装饰器：BufferedXXX\n###往数据库写入字节流\n```java\nString sql = \"insert into blob_test(big_bit) values (?) \";\nps = conn.prepareStatement(sql);\nFile file = new File(\"src/jdbc/img.png\");\nInputStream reader = new BufferedInputStream(new FileInputStream(file));\nps.setBinaryStream(1, reader,(int)file.length());\nint i = ps.executeUpdate();\nreader.close();\n```\n###从数据库中读取字节流\n```java\nString sql = \"select big_bit from blob_test\";\n\nrs = st.executeQuery(sql);\t\nwhile(rs.next()){\n\tInputStream in = rs.getBinaryStream(1);\n\tFile file = new File(\"back.png\");\n\tOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n\tbyte[]buff = new byte[1024];\n\tfor(int i=0;(i=in.read(buff))>1; ){\n\t\tout.write(buff, 0, i);\n\t}\n\tout.close();\n\tin.close();\n}\n```","source":"_posts/JDBC学习.md","raw":"title: \"学习JDBC:JDBC\"\ndate: 2015-04-29 16:36:30\ntags: [JDBC]\ncategories: JDBC\ndescription: 主要介绍了什么是JDBC，以及在JAVA里面如何关联数据库\n---\n#JDBC简介\n应用程序、JDBC API、数据库驱动和数据库之间的关系![JDBC简介](http://askingwindy-gitcafe.qiniudn.com/JDBC简介.png)\n\ndriver实现了JDBC的接口，是由数据库开发\n##连接数据的步骤\n```java\n/*\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport com.mysql.jdbc.Driver;\n*/\n\n/**\n * 不太规范的示范\n * @throws ClassNotFoundException\n * @throws SQLException\n */\npublic static void test() throws ClassNotFoundException, SQLException{\n\t//1.注册驱动\n\tDriverManager.registerDriver(new Driver());//或者写：com.mysql.jdbc.Drive()\n\t//2.建立连接\n\tConnection conn = DriverManager.getConnection(\n\t\t\t\"jdbc:mysql://localhost:3306/jdbc\", \"root\", \"123456\");\n\t//3.创建语句\n\tStatement st = conn.createStatement();\n\t\n\t//4.执行语句\n\tResultSet rs = st.executeQuery(\"select * from user\");\n\t\n\t//5.处理结果\n\twhile(rs.next()){//按行遍历\n\t\t//1是第一列\n\t\tSystem.out.println(rs.getObject(1) + \"\\t\" + rs.getObject(2) +\"\\t\" \n\t\t\t\t+rs.getObject(3) + \"\\t\" + rs.getObject(4));\n\t}\n\t\n\t//6.释放资源：关闭的顺序与创建顺序相反\n\trs.close();\n\tst.close();\n\tconn.close();\n}\n```\n### 1. 注册驱动(只做一次)\n同一个程序可以注册很多驱动\n####第1种方法\n若果jar包不存在，编译无法通过\n第一种方式在类加载时会执行静态的类加载（类似第三种注册方式，表明已注册一次），但是由于语句声明又会被注册一次，所以第一种方式加载了两次。产生了垃圾注册\n```java\nDriverManager.registerDriver(new Driver());//或者写：com.mysql.jdbc.Drive()\n```\n####第2种方法\n```java\n//第2种方法\nSystem.setProperty(\"jdbc.drivers\", \"com.mysql.jdbc.Drive()\");//setProperty(key, value)\n```\n在`value`部分，利用冒号来区分多个驱动；例如：\"com.mysql..:com.sqlserver\"\n####第3种方法\n推荐方式\n```java\nClass.forName(\"com.mysql.jdbc.Driver\");//根据类的名字，将类加载到jvm\n```\n### 2. 建立连接\n```java\nString  url= \"jdbc:mysql://localhost:3306/jdbc\";\nString root = \"root\";\nString password = \"123456\";\nConnection conn = DriverManager.getConnection(\n\t\turl, root, password);\n```\n####url格式\n```java\n\"jdbc:子协议:子名称(mysql里面没有子名称)//主机名:端口号(如果缺省，可以省略主机名与端口号)/数据库名\n```\n### 3. 创建、执行语句\n```java\n//3.创建语句\nStatement st = conn.createStatement();\n//4.执行语句\nResultSet rs = st.executeQuery(\"select * from user\");\n```\n###4.处理结果\n`rs.next()`是按行遍历，从下标为1的第1列开始\n```java\nwhile(rs.next()){//按行遍历\n\t//1是第一列\n\tSystem.out.println(rs.getObject(1) + \"\\t\" + rs.getObject(2) +\"\\t\" \n\t\t\t+rs.getObject(3) + \"\\t\" + rs.getObject(4));\n}\n```\n###5.释放资源\n后创建的要先关闭\n- 数据库建立连接能力有限\n\n```java\nrs.close();\nst.close();\nconn.close();\n```\nconnection是尽量晚建立，早释放==>减少占用TCP/IP时间\n##规范的示例，可当做模板使用\n```java\n#jdbc.java\npublic static void template() throws ClassNotFoundException, SQLException{\n\tConnection conn = null;\n\tStatement st = null;\n\tResultSet rs = null;\n\ttry {\n\t\t\t\n\t\tconn = JdbcUtils.getConnection();\n\t\t\n\t\tst = conn.createStatement();\n\t\t\n\t\trs = st.executeQuery(\"select * from user\");\n\n\t\twhile(rs.next()){//按行遍历\n\t\t\t//1是第一列\n\t\t\tSystem.out.println(rs.getObject(1) + \"\\t\" + rs.getObject(2) +\"\\t\" \n\t\t\t\t\t+rs.getObject(3) + \"\\t\" + rs.getObject(4));\n\t\t}\n\t}finally{\n\t\tJdbcUtils.free(rs, st, conn);\n\t}\t\n}\n```\n其中，JdbcUtils是自定义的工具类，代码如下：\n```java\npackage jdbc;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * 工具类\n * @author RY\n *\n */\npublic final class JdbcUtils {\n\tprivate static String  url= \"jdbc:mysql://localhost:3306/jdbc\";\n\tprivate static String root = \"root\";\n\tprivate static String password = \"123456\";\n\t\n\tprivate JdbcUtils(){}\n\t//注册驱动\n\tstatic{\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new ExceptionInInitializerError(e);\n\t\t}\n\t}\n\t\n\t/**\n\t * 创建连接\n\t * @return\n\t * @throws SQLException\n\t */\n\tpublic static Connection getConnection() throws SQLException{\n\t\treturn  DriverManager.getConnection(url, root, password);\n\t}\n\t\n\t/**\n\t * 释放资源\n\t * @param rs\n\t * @param st\n\t * @param conn\n\t */\n\tpublic static void free(ResultSet rs, Statement st, Connection conn){\n\t\tif(rs!=null){\n\t\t\ttry {\n\t\t\t\trs.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}finally{\n\t\t\t\tif(st!=null){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tst.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}finally{\n\t\t\t\t\t\tif(conn!=null){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconn.close();\n\t\t\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t}\t\n}\n```\n***\n#对行的操作：CRUD\nC：create\nR:  read\nU: Update\nD: Delete\n\n使用**PreparedStatement**来替换Statement!!!\n\n##C(create)\n插入语句（`insert into ... values...`），利用：`st.executeUpdate(sql)`，其返回值是个int型的值，表示受到改变的行数\n利用PreparedStatement：\n```java\npublic static void create(String name, java.util.Date birthday, float money) throws SQLException{\n\tConnection conn = null;\n\tPreparedStatement ps = null;\n\tResultSet rs = null;\n\ttry{\n\t\tconn = JdbcUtils.getConnection();\n\t\t\n\t\tString sql = \"INSERT INTO user (name, birthday, money) VALUES (?, ?, ?)\";\n\t\tps = conn.prepareStatement(sql);\n\t\tps.setString(1, name);\n\t\tps.setDate(2, new java.sql.Date(birthday.getTime()));\n\t\tps.setFloat(3, money);\n\t\tint i = ps.executeUpdate();\n\t\tSystem.out.println(\"i = \"+i);\n\t}finally{\n\t\tJdbcUtils.free(rs, ps, conn);\n\t}\n}\n```\n###Date的转换\n形参中的Date是java.util.*中的类，而sql接收的Date事java.sql.*中的类（是java.util的子类）\n所以需要进行一个类的转换`new java.sql.Date(birthday.getTime()`\n##R(read)\n读取语句（`select ... from ... where...`），利用：`st.executeQuery(sql)`，其返回值是个ResultSet，可以逐行扫描读取结果\n```java\npublic static void read() throws SQLException{\n\tConnection conn = null;\n\tStatement st = null;\n\tResultSet rs = null;\n\ttry {\t\t\t\t\n\t\tconn = JdbcUtils.getConnection();\t\t\n\t\tst = conn.createStatement();\t\n\t\t//直接写*的缺点：导致不知道列名，以及取出数据量太大\n\t\trs = st.executeQuery(\"select id, name, birthday, money from user\");\n\t\t\n\t\twhile(rs.next()){//按行遍历\n\t\t\t//根据列名来获取数据\n\t\t\tSystem.out.println(rs.getObject(\"id\") + \"\\t\" \n\t\t\t\t\t+ rs.getObject(\"name\") +\"\\t\" \n\t\t\t\t\t+rs.getObject(\"birthday\") + \"\\t\" \n\t\t\t\t\t+ rs.getObject(\"money\"));\n\t\t}\n\t}finally{\n\t\tJdbcUtils.free(rs, st, conn);\n\t}\t\n}\n```\n##U(update)\n```java\npublic static void update() throws SQLException{\n\tConnection conn = null;\n\tStatement st = null;\n\tResultSet rs = null;\n\ttry {\t\t\t\t\n\t\tconn = JdbcUtils.getConnection();\t\t\n\t\tst = conn.createStatement();\t\n\t\t\n\t\tString sql = \"UPDATE user SET money =  money + 10\";\n\t\tint i = st.executeUpdate(sql);\n\t\tSystem.out.println(\"i = \"+i);\n\n\t}finally{\n\t\tJdbcUtils.free(rs, st, conn);\n\t}\t\n}\n```\n##D(delete)\n```sql\npublic static void delete() throws SQLException{\n\tConnection conn = null;\n\tStatement st = null;\n\tResultSet rs = null;\n\ttry {\t\t\t\t\n\t\tconn = JdbcUtils.getConnection();\t\t\n\t\tst = conn.createStatement();\t\n\t\t\n\t\tString sql = \"DELEGE FROM user WHERE money < 1000\";\n\t\tint i = st.executeUpdate(sql);\n\t\tSystem.out.println(\"i = \"+i);\n\n\t}finally{\n\t\tJdbcUtils.free(rs, st, conn);\n\t}\t\n}\n```\n##注意\n###不能将`conn`关闭，然后返回`rs`给上层\n一旦`conn`关闭，`conn`后的都会无效，包括`st`与`rs`\n- 但是必须全部关闭，后续会有**连接池**的概念\n***\n#其他\n##SQL注入\n```java\npublic static void read(String s){\n...\nrs = st.executeQuery(\"SELECT id, name, birthday, money FROM user WHERE name = '\" + s + \"'\")；\n}\n```\n期望：传入s=某个名字时，得到这个名字对应的一行的数据\n但是，当`s = ' or 1 or ' `时，会输出所有数据，这是因为此时sql识别的语句是：\n```sql\nSELECT id, name, birthday, money \nFROM user\nWHERE name = '' or 1 or ''#由于是or语法+1(恒为真)\n```\n###修复SQL注入：PreparedStatement\nPreparedStatement是Statement的子类\n- 将`Statement`改为`PreparedStatement`类，对sql语句进行预处理来避免SQL注入\n- sql的语句里，不再利用拼接，而是利用`?`占位符\n```sql\nPreparedStatement ps = null;\nString sql = \"SELECT id, name, money, birthday FROM user WHERE name = ?\";\nps = conn.preparedStatement(sql);\nps.setString(1, name);//表明第一个问号是name\nrs = ps.executeQuery();\n```\n##大文本存储\n数据库：clob_test\n|field|type|\n|--|--|\n|id|int|\n|big_text|text|\n###如何从file中读取文件字符流\n利用Reader与Writer来读取文件的字符流\n利用装饰器：BufferedXXX\n###往数据库写入大文本\n从本地读取一个文件，写入数据库中\n```java\nString sql = \"insert into clob_test(big_test) values (?) \";\nps = conn.prepareStatement(sql);\nFile file = new File(\"src/jdbc/JdbcUtils.java\");\nReader reader = new BufferedReader(new FileReader(file));\nps.setCharacterStream(1, reader,(int)file.length());\nint i = ps.executeUpdate();\nreader.close();\n```\n###从数据库读取大文本\n利用`Clob`类\n```java\nwhile(rs.next()){\n\tClob clob = rs.getClob(1);\n\tReader reader = clob.getCharacterStream();\n\tFile file = new File(\"JdbcUtils_bak.java\");\n\tWriter writer = new BufferedWriter(new FileWriter(file));\n\tchar[]buff = new char[1024];\n\tfor(int i=0;(i=reader.read(buff))>1; ){\n\t\twriter.write(buff, 0, i);\n\t}\n\twriter.close();\n\treader.close();\n}\n```\n##大字节数组\n###如何从file中读取文件字节流\n利用InputStream与OutputStream来读取文件的字符流\n利用装饰器：BufferedXXX\n###往数据库写入字节流\n```java\nString sql = \"insert into blob_test(big_bit) values (?) \";\nps = conn.prepareStatement(sql);\nFile file = new File(\"src/jdbc/img.png\");\nInputStream reader = new BufferedInputStream(new FileInputStream(file));\nps.setBinaryStream(1, reader,(int)file.length());\nint i = ps.executeUpdate();\nreader.close();\n```\n###从数据库中读取字节流\n```java\nString sql = \"select big_bit from blob_test\";\n\nrs = st.executeQuery(sql);\t\nwhile(rs.next()){\n\tInputStream in = rs.getBinaryStream(1);\n\tFile file = new File(\"back.png\");\n\tOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n\tbyte[]buff = new byte[1024];\n\tfor(int i=0;(i=in.read(buff))>1; ){\n\t\tout.write(buff, 0, i);\n\t}\n\tout.close();\n\tin.close();\n}\n```","slug":"JDBC学习","published":1,"updated":"2015-10-07T14:21:42.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3dy001fggtuud885481"},{"title":"集合的深克隆","date":"2015-04-28T04:36:30.000Z","description":"什么是深克隆？JAVA类如何深克隆？集合如何深克隆？附加小菜：Marker Interface","_content":"#什么是深克隆\n##浅克隆\n- 被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。\n\n换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象\n```java\nClassA  a = new ClassA();\nClassA shallowClone = a;//浅拷贝\n```\n浅拷贝中，如果改变了a指向的对象，会影响shallowClone指向的对象\n![浅拷贝例子](http://askingwindy-gitcafe.qiniudn.com/浅拷贝.png)\n为了避免这种情况，需要进行深克隆\n\n##深克隆\n- 被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。\n\n换言之，深复制把要复制的对象所引用的对象都复制了一遍。\n```java\nClassA  a = new ClassA();\nClassA shallowClone = a.clone();//浅拷贝\n```\n注意，这里可以调用`a.clone()`方法，那么`ClassA`必须实现了`Cloneable`接口\n![深拷贝例子](http://askingwindy-gitcafe.qiniudn.com/深拷贝.png)\n##Cloneable接口\n- Cloneable接口里面没有任何的方法，它用来指明一个类可以逐位复制一个对象——Marker Interface（标识接口，没有定义任何的方法，如Cloneable和Serializable接口）\n\t- 如果你试图对一个没有实现Cloneable接口的类调用clone()方法，一个CloneNotSupportedException 就会抛出。\n\t- 在复制时，被复制的对象的构造器并没有被调用。复制对象就是原来对象的拷贝\n- 需要override的clone()方法是属于Object类的。但是Object类的clone()方法访问权限是：protected\n- clone()产生了一个调用它的对象的复制;只有实现了Cloneable接口的类才可以被复制\n\n### 如何让一个类实现Cloneable接口\n1.在派生类中覆盖基类的clone()方法，并声明为public()Object类中的clone()方法为protected的)。\n2.在派生类的clone()方法中，调用super.clone()\n3.在派生类中实现Cloneable接口\n```java\npublic class Student implements Cloneable{\n\tprivate String name;\n\tprivate Teacher teacher;\n\t\n\t@Override\n    public Student  clone() throws CloneNotSupportedException {\n\t    //手动对每一个成员变量进行复制\n\t    Student o = (Student)super.clone();//必不可少的一句话\n        o.name = (String)this.name.clone();\n        o.teacher = (Teacher)this.teacher.clone();//这里对Teacher类进行了克隆\n        return o;\n    }\n}\n```\n下面的例子说明了如何对一个类进行深拷贝:\n```java\nStudent s1 = new Student();\nStudent s2 = s1.clone();\n```\n同时，我们注意到，Student类里包含了一个Teacher类，在对Student类进行clone()方法复写时，我们需要对Teacher类进行复写：\n```java\npublic class Teacher implements Cloneable{\n\tprivate String name;\n\t\n\t@Override\n    public Teacher clone() throws CloneNotSupportedException {\n\t    Teacher o = (Teacher )super.clone();\n        o.name = (String)this.name.clone();\n        return o;\n    }\n}\n```\n如果没有对Teacher没有实现Cloneable接口，在JVM虚拟堆里面的情况：\n![嵌套类的浅拷贝](http://askingwindy-gitcafe.qiniudn.com/嵌套类的浅拷贝.png)\n#集合的深克隆\n集合的模板如果是类，这个类必须实现了Cloneable接口（如上述的Student类）\n##List深克隆：循环复制(最方便)\n```java\n#已经有一个Student的list:stuList\nList<Student> copyList = new ArrayList<>();\nfor(Student stu : stuList){\n\tcopyList.add(stu.clone())；\n}\n```\n***\n#遇到的问题\n项目中遇到如下问题：\n实现功能：有一个复杂的类Edge，得到List<Edge>后，希望调用另外一个方法删除Edge e = 特定条件的类\n##原始代码\n```java\nList<Edge> edgeList = A.getEdgeList();\nfor(Edge e : edgeList){\n\tif(e.equals(new Edge(d)){\n\t\tfunc(e);//func()里面可能会删除这个e\n\t}\t\n}\n```\n##错误信息\n在运行时，会出现Java Concurrent Modification Exception Error 错误\n##解决方法\n\n```java\n//进行深拷贝\nList<Edge> edgeList = new ArrayList<>();\nfor(Edge e: A.getEdgeList()){\n\tedgeList.add(e.clone());\n}\n//对edgeList的操作不会影响A.getEdgeList\nfor(Edge e : edgeList){\n\tif(e.equals(new Edge(d)){\n\t\tfunc(e);//func()里面可能会删除这个e\n\t}\t\n}\n```","source":"_posts/JAVA遇到的问题-集合的深克隆.md","raw":"title: \"集合的深克隆\"\ndate: 2015-04-28 12:36:30\ntags: [Java]\ncategories: Java遇到的问题\ndescription: 什么是深克隆？JAVA类如何深克隆？集合如何深克隆？附加小菜：Marker Interface\n---\n#什么是深克隆\n##浅克隆\n- 被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。\n\n换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象\n```java\nClassA  a = new ClassA();\nClassA shallowClone = a;//浅拷贝\n```\n浅拷贝中，如果改变了a指向的对象，会影响shallowClone指向的对象\n![浅拷贝例子](http://askingwindy-gitcafe.qiniudn.com/浅拷贝.png)\n为了避免这种情况，需要进行深克隆\n\n##深克隆\n- 被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。\n\n换言之，深复制把要复制的对象所引用的对象都复制了一遍。\n```java\nClassA  a = new ClassA();\nClassA shallowClone = a.clone();//浅拷贝\n```\n注意，这里可以调用`a.clone()`方法，那么`ClassA`必须实现了`Cloneable`接口\n![深拷贝例子](http://askingwindy-gitcafe.qiniudn.com/深拷贝.png)\n##Cloneable接口\n- Cloneable接口里面没有任何的方法，它用来指明一个类可以逐位复制一个对象——Marker Interface（标识接口，没有定义任何的方法，如Cloneable和Serializable接口）\n\t- 如果你试图对一个没有实现Cloneable接口的类调用clone()方法，一个CloneNotSupportedException 就会抛出。\n\t- 在复制时，被复制的对象的构造器并没有被调用。复制对象就是原来对象的拷贝\n- 需要override的clone()方法是属于Object类的。但是Object类的clone()方法访问权限是：protected\n- clone()产生了一个调用它的对象的复制;只有实现了Cloneable接口的类才可以被复制\n\n### 如何让一个类实现Cloneable接口\n1.在派生类中覆盖基类的clone()方法，并声明为public()Object类中的clone()方法为protected的)。\n2.在派生类的clone()方法中，调用super.clone()\n3.在派生类中实现Cloneable接口\n```java\npublic class Student implements Cloneable{\n\tprivate String name;\n\tprivate Teacher teacher;\n\t\n\t@Override\n    public Student  clone() throws CloneNotSupportedException {\n\t    //手动对每一个成员变量进行复制\n\t    Student o = (Student)super.clone();//必不可少的一句话\n        o.name = (String)this.name.clone();\n        o.teacher = (Teacher)this.teacher.clone();//这里对Teacher类进行了克隆\n        return o;\n    }\n}\n```\n下面的例子说明了如何对一个类进行深拷贝:\n```java\nStudent s1 = new Student();\nStudent s2 = s1.clone();\n```\n同时，我们注意到，Student类里包含了一个Teacher类，在对Student类进行clone()方法复写时，我们需要对Teacher类进行复写：\n```java\npublic class Teacher implements Cloneable{\n\tprivate String name;\n\t\n\t@Override\n    public Teacher clone() throws CloneNotSupportedException {\n\t    Teacher o = (Teacher )super.clone();\n        o.name = (String)this.name.clone();\n        return o;\n    }\n}\n```\n如果没有对Teacher没有实现Cloneable接口，在JVM虚拟堆里面的情况：\n![嵌套类的浅拷贝](http://askingwindy-gitcafe.qiniudn.com/嵌套类的浅拷贝.png)\n#集合的深克隆\n集合的模板如果是类，这个类必须实现了Cloneable接口（如上述的Student类）\n##List深克隆：循环复制(最方便)\n```java\n#已经有一个Student的list:stuList\nList<Student> copyList = new ArrayList<>();\nfor(Student stu : stuList){\n\tcopyList.add(stu.clone())；\n}\n```\n***\n#遇到的问题\n项目中遇到如下问题：\n实现功能：有一个复杂的类Edge，得到List<Edge>后，希望调用另外一个方法删除Edge e = 特定条件的类\n##原始代码\n```java\nList<Edge> edgeList = A.getEdgeList();\nfor(Edge e : edgeList){\n\tif(e.equals(new Edge(d)){\n\t\tfunc(e);//func()里面可能会删除这个e\n\t}\t\n}\n```\n##错误信息\n在运行时，会出现Java Concurrent Modification Exception Error 错误\n##解决方法\n\n```java\n//进行深拷贝\nList<Edge> edgeList = new ArrayList<>();\nfor(Edge e: A.getEdgeList()){\n\tedgeList.add(e.clone());\n}\n//对edgeList的操作不会影响A.getEdgeList\nfor(Edge e : edgeList){\n\tif(e.equals(new Edge(d)){\n\t\tfunc(e);//func()里面可能会删除这个e\n\t}\t\n}\n```","slug":"JAVA遇到的问题-集合的深克隆","published":1,"updated":"2015-10-07T14:29:44.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3e2001kggtu9cnzkte3"},{"title":"static关键字","date":"2015-05-07T09:41:48.000Z","description":"static关键字可以用来修饰变量、方法、代码块和内部类","_content":"#static关键字\n\n|修饰的对象|作用|\n\n|--|--|\n\n|类中的成员变量|这个变量是静态变量，属于类，不属于某个实例（不需要创建对象可以使用）；在内存中只有一个复制，在类加载时，这个变量就会被分配空间|\n\n|类中的方法|这个方法是静态方法，属于类，不需要创建对象可以使用|\n\n|代码块|加载类时会执行static代码块，且只被执行一次；通常用来初始化静态变量|\n\n|内部类|可以不依赖外部类被实例化|\n\n## 常问问题\n\n- 静态方法只能调用静态方法、只能使用静态变量","source":"_posts/JAVA遇到的问题-static关键字.md","raw":"title: static关键字\ndate: 2015-05-07 17:41:48\ncategories: Java遇到的问题\ntags: [Java]\ndescription: static关键字可以用来修饰变量、方法、代码块和内部类\n---\n#static关键字\n\n|修饰的对象|作用|\n\n|--|--|\n\n|类中的成员变量|这个变量是静态变量，属于类，不属于某个实例（不需要创建对象可以使用）；在内存中只有一个复制，在类加载时，这个变量就会被分配空间|\n\n|类中的方法|这个方法是静态方法，属于类，不需要创建对象可以使用|\n\n|代码块|加载类时会执行static代码块，且只被执行一次；通常用来初始化静态变量|\n\n|内部类|可以不依赖外部类被实例化|\n\n## 常问问题\n\n- 静态方法只能调用静态方法、只能使用静态变量","slug":"JAVA遇到的问题-static关键字","published":1,"updated":"2015-10-07T14:29:36.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3ea001pggtubokkycct"},{"title":"搭建GIT服务器","date":"2015-03-01T01:07:15.000Z","description":"如何在本地搭建自己的GIT服务器，来分布式协作代码;以及搭建完成后，客户端如何使用","_content":"#搭建GIT服务器\n假设你已经有sudo权限的用户账号，下面，正式开始安装。\n##第一步，安装git：\n```\n$ sudo apt-get install git\n```\n##第二步，创建一个git用户，用来运行git服务：\n```\n$ sudo adduser git\n```\n##第三步，创建证书登录：\n收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到`/home/git/.ssh/authorized_keys`文件里，一行一个（没有.ssh目录需要自己创建）。\n##第四步，初始化Git仓库：\n先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：\n```\n$ sudo git init --bare sample.git\n```\nGit就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：\n```\n$ sudo chown -R git:git sample.git\n```\n##第五步，禁用shell登录：\n出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：\n```\ngit:x:1001:1001:,,,:/home/git:/bin/bash\n```\n改为：\n```\ngit:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n```\n这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n##第六步，克隆远程仓库：\n现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：\n```\n$ git clone git@server:/srv/sample.git\nCloning into 'sample'...\nwarning: You appear to have cloned an empty repository.\n```\n剩下的推送就简单了。\n***\n#客户端如何使用GIT服务器\n##第一步：创建自己的公钥，并提交给服务器\n将服务器保存客户端的公钥到`/home/git/.ssh/authorized_keys`文件\n###公钥是什么\n产生公钥：\n公钥在`id_rsa.pub`里面，大概如下：\n##第二步：与远程仓库连接\n###如果没有本地仓库\n```\ngit clone git@10.108.50.122:/origin/origin.git\n```\n###如果有本地仓库\n```\ngit remote add origin git@10.108.50.122:/origin/origin.git\n```\n***\n#常用的命令行\n##添加了新代码，需要提交\n```\ngit add -A\ngit commit -m \"修改了哪些地方\"\ngit push origin master（可修改，提交的分支改变）//创建+切换分支：git checkout -b 分支名称\n```\n##代码修改错误，需要回溯版本\n```\ngit log (查看提交了的版本号)\ngit reset --hard 版本号\n```\n如果想回到未来，使用命令`git reflog`查看历史版本\n##同步版本号\n###查看远程库信息\n```\ngit remote -v\n```\n###多人协作\n1. 试图用`git push origin branch-name`推送自己的修改\n2. 如果推送失败，因为远程分支比本地分支还要新，首先需要`git pull`进行合并\n3. 如果合并有冲突，解决冲突，并在本地提交\n4. 重复步骤1\n\n#### no tracking information\n如果`git pull`时出现这个错误，说明本地分支和远程分支的连接关系没有创捷，先通过命令：\n```\ngit branch --set-upstream branch-name origin/branch-name\n```\n#参考网站\n[廖学锋搭建git](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000)","source":"_posts/Git方法_搭建GIT服务器.md","raw":"title: 搭建GIT服务器\ndate: 2015-03-1 09:07:15\ncategories: Git使用教程\ntags: [Git]\ndescription: 如何在本地搭建自己的GIT服务器，来分布式协作代码;以及搭建完成后，客户端如何使用\n---\n#搭建GIT服务器\n假设你已经有sudo权限的用户账号，下面，正式开始安装。\n##第一步，安装git：\n```\n$ sudo apt-get install git\n```\n##第二步，创建一个git用户，用来运行git服务：\n```\n$ sudo adduser git\n```\n##第三步，创建证书登录：\n收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到`/home/git/.ssh/authorized_keys`文件里，一行一个（没有.ssh目录需要自己创建）。\n##第四步，初始化Git仓库：\n先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：\n```\n$ sudo git init --bare sample.git\n```\nGit就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：\n```\n$ sudo chown -R git:git sample.git\n```\n##第五步，禁用shell登录：\n出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：\n```\ngit:x:1001:1001:,,,:/home/git:/bin/bash\n```\n改为：\n```\ngit:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n```\n这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n##第六步，克隆远程仓库：\n现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：\n```\n$ git clone git@server:/srv/sample.git\nCloning into 'sample'...\nwarning: You appear to have cloned an empty repository.\n```\n剩下的推送就简单了。\n***\n#客户端如何使用GIT服务器\n##第一步：创建自己的公钥，并提交给服务器\n将服务器保存客户端的公钥到`/home/git/.ssh/authorized_keys`文件\n###公钥是什么\n产生公钥：\n公钥在`id_rsa.pub`里面，大概如下：\n##第二步：与远程仓库连接\n###如果没有本地仓库\n```\ngit clone git@10.108.50.122:/origin/origin.git\n```\n###如果有本地仓库\n```\ngit remote add origin git@10.108.50.122:/origin/origin.git\n```\n***\n#常用的命令行\n##添加了新代码，需要提交\n```\ngit add -A\ngit commit -m \"修改了哪些地方\"\ngit push origin master（可修改，提交的分支改变）//创建+切换分支：git checkout -b 分支名称\n```\n##代码修改错误，需要回溯版本\n```\ngit log (查看提交了的版本号)\ngit reset --hard 版本号\n```\n如果想回到未来，使用命令`git reflog`查看历史版本\n##同步版本号\n###查看远程库信息\n```\ngit remote -v\n```\n###多人协作\n1. 试图用`git push origin branch-name`推送自己的修改\n2. 如果推送失败，因为远程分支比本地分支还要新，首先需要`git pull`进行合并\n3. 如果合并有冲突，解决冲突，并在本地提交\n4. 重复步骤1\n\n#### no tracking information\n如果`git pull`时出现这个错误，说明本地分支和远程分支的连接关系没有创捷，先通过命令：\n```\ngit branch --set-upstream branch-name origin/branch-name\n```\n#参考网站\n[廖学锋搭建git](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000)","slug":"Git方法_搭建GIT服务器","published":1,"updated":"2015-10-07T14:29:22.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cifgwa3ef001sggtutifoplnf"}],"PostAsset":[],"PostCategory":[{"post_id":"cifgwa34i0000ggtuvifohdr0","category_id":"cifgwa34s0001ggtugkhe6i30","_id":"cifgwa34x0004ggtuacdxoino"},{"post_id":"cifgwa3bk0008ggtufb89oxzh","category_id":"cifgwa3bn0009ggtuuvwbuzto","_id":"cifgwa3bq000cggtushj7hznz"},{"post_id":"cifgwa3bu000fggtuw5fqfqxr","category_id":"cifgwa3bw000gggtu9q8gf9o8","_id":"cifgwa3bz000jggtuuu9ivris"},{"post_id":"cifgwa3c4000kggtute4uvf4f","category_id":"cifgwa3bw000gggtu9q8gf9o8","_id":"cifgwa3c7000lggtub2r4ofap"},{"post_id":"cifgwa3cd000nggtu4igr4t3e","category_id":"cifgwa3ch000oggtu4hf0j745","_id":"cifgwa3ck000rggtuxzhgc5qt"},{"post_id":"cifgwa3co000sggtuy9ck90jr","category_id":"cifgwa3ch000oggtu4hf0j745","_id":"cifgwa3cq000tggtu6u61pncg"},{"post_id":"cifgwa3cs000vggtuyw6lzsza","category_id":"cifgwa3ch000oggtu4hf0j745","_id":"cifgwa3dc000wggtulm8bwuat"},{"post_id":"cifgwa3dg000yggtu1iuyc0f9","category_id":"cifgwa3dh000zggtup3t9pt04","_id":"cifgwa3dj0012ggtu9j1296ax"},{"post_id":"cifgwa3dm0013ggtu25dbbnmq","category_id":"cifgwa3do0014ggtup9yn9wm8","_id":"cifgwa3dq0017ggtuxl2klpp3"},{"post_id":"cifgwa3dr0018ggtu1gmaz2uc","category_id":"cifgwa3dh000zggtup3t9pt04","_id":"cifgwa3dt0019ggtun3mrpww8"},{"post_id":"cifgwa3dv001bggtuuhoj2h0b","category_id":"cifgwa3dw001cggtu96bma416","_id":"cifgwa3dw001eggtu7zajnpxp"},{"post_id":"cifgwa3dy001fggtuud885481","category_id":"cifgwa3dz001gggtuxqqvl5ig","_id":"cifgwa3e0001jggtuwkiq0ix3"},{"post_id":"cifgwa3e2001kggtu9cnzkte3","category_id":"cifgwa3e5001lggtul9ys84ob","_id":"cifgwa3e7001oggtup6hw87dc"},{"post_id":"cifgwa3ea001pggtubokkycct","category_id":"cifgwa3e5001lggtul9ys84ob","_id":"cifgwa3ec001qggtu2bgx92ds"},{"post_id":"cifgwa3ef001sggtutifoplnf","category_id":"cifgwa34s0001ggtugkhe6i30","_id":"cifgwa3eh001tggtu06ow6nkl"}],"PostTag":[{"post_id":"cifgwa34i0000ggtuvifohdr0","tag_id":"cifgwa34s0002ggtuo9xbz2yb","_id":"cifgwa34x0003ggtu6wbpwdhm"},{"post_id":"cifgwa3bk0008ggtufb89oxzh","tag_id":"cifgwa3bn000aggtudnm6mb9i","_id":"cifgwa3bq000dggtujgspf6ws"},{"post_id":"cifgwa3bk0008ggtufb89oxzh","tag_id":"cifgwa3bo000bggtu1fluy4po","_id":"cifgwa3br000eggtur7pemwis"},{"post_id":"cifgwa3bu000fggtuw5fqfqxr","tag_id":"cifgwa3bx000hggtux7r0a189","_id":"cifgwa3bz000iggtuism863no"},{"post_id":"cifgwa3c4000kggtute4uvf4f","tag_id":"cifgwa3bx000hggtux7r0a189","_id":"cifgwa3c9000mggtuu9xh7bar"},{"post_id":"cifgwa3cd000nggtu4igr4t3e","tag_id":"cifgwa3ci000pggtusc1jwisa","_id":"cifgwa3cj000qggtu6k5yolpn"},{"post_id":"cifgwa3co000sggtuy9ck90jr","tag_id":"cifgwa3ci000pggtusc1jwisa","_id":"cifgwa3cq000uggtuhpgea866"},{"post_id":"cifgwa3cs000vggtuyw6lzsza","tag_id":"cifgwa3ci000pggtusc1jwisa","_id":"cifgwa3dd000xggtu8xwyl6xq"},{"post_id":"cifgwa3dg000yggtu1iuyc0f9","tag_id":"cifgwa3di0010ggtubbr5ta2r","_id":"cifgwa3di0011ggtubfwcc7i3"},{"post_id":"cifgwa3dm0013ggtu25dbbnmq","tag_id":"cifgwa3dp0015ggtucxrxvr5n","_id":"cifgwa3dp0016ggtuq6wv1p0a"},{"post_id":"cifgwa3dr0018ggtu1gmaz2uc","tag_id":"cifgwa3di0010ggtubbr5ta2r","_id":"cifgwa3dt001aggtuhwbar1qp"},{"post_id":"cifgwa3dv001bggtuuhoj2h0b","tag_id":"cifgwa3dp0015ggtucxrxvr5n","_id":"cifgwa3dw001dggtuekog6fz8"},{"post_id":"cifgwa3dy001fggtuud885481","tag_id":"cifgwa3dz001hggtuf8v806wa","_id":"cifgwa3e0001iggtuuuirew4w"},{"post_id":"cifgwa3e2001kggtu9cnzkte3","tag_id":"cifgwa3e5001mggtulqiuefls","_id":"cifgwa3e7001nggtuu68iohfn"},{"post_id":"cifgwa3ea001pggtubokkycct","tag_id":"cifgwa3e5001mggtulqiuefls","_id":"cifgwa3ec001rggtuj505duk0"},{"post_id":"cifgwa3ef001sggtutifoplnf","tag_id":"cifgwa34s0002ggtuo9xbz2yb","_id":"cifgwa3ei001uggtur83q2mz5"}],"Tag":[{"name":"Git","_id":"cifgwa34s0002ggtuo9xbz2yb"},{"name":"Blog","_id":"cifgwa3bn000aggtudnm6mb9i"},{"name":"程序员初级修炼","_id":"cifgwa3bo000bggtu1fluy4po"},{"name":"读书","_id":"cifgwa3bx000hggtux7r0a189"},{"name":"Maven","_id":"cifgwa3ci000pggtusc1jwisa"},{"name":"SQL基本知识","_id":"cifgwa3di0010ggtubbr5ta2r"},{"name":"SQL","_id":"cifgwa3dp0015ggtucxrxvr5n"},{"name":"JDBC","_id":"cifgwa3dz001hggtuf8v806wa"},{"name":"Java","_id":"cifgwa3e5001mggtulqiuefls"}]}}